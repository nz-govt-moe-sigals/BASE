// To Strip Comments for JSONLINT Checking, use regex: (^|[^:])//.*
// -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
// INSTRUCTIONS
// -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
// * This template is not much more a system specific (ie, in the system's source code)
//   simplified wrapper of a remote, much more complex, 'assembly'.
// * For the most part, leave it alone, concentrating on filling in the associated parameters file
//   within which you'll have to at consider providing the
// * Some Template vars are not provided by the Parameters file, but are provided
//   via the Build Agent, including:
//   * PrincipalId
// * Some params can be provided either in Params, or via Build Agent:
//   * environmentId
//   * templatesRelease
// * REFER TO CONFIDENTIAL INFO SAFELY USING 'REFERENCE' INSTEAD OF 'VALUE':
//   # "value": "EVERYBODY CAN SEE THIS...NOT GOOD"
//   "reference": {"keyVault": {"id": "/subscriptions/{TODO:SUBID}/resourcegroups/{TODO:RGNAME}/providers/Microsoft.KeyVault/vaults/{TODO:KVNAME}"},"secretName": "{SOMEKEY}"}
// -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // PARAMETERS: URLS TO CHILD TEMPLATES 
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // The http based root url from which to download referenced Assembly ARM Templates. 
    // In most cases will be an Url to a Storage Account Container Url to which 
    // newly downloaded Source Files (just the ARM Templates) are copied to
    "linkedAssembliesArmTemplateRootUrl": {
      "value": "https://nzmoestartpublic.blob.core.windows.net/public/start/releases/{TEMPLATESRELEASE}/arm-templates/assemblies/"
      //"value": "https://nzmoestartpublic.blob.core.windows.net/public/start/releases/0.0/arm-templates/assemblies/"
    },
    // The http based root url from which to download referenced linked Resource ARM Templates. 
    // In most cases will be an Url to a Storage Account Container Url to which 
    // newly downloaded Source Files (just the ARM Templates) are copied to
    "linkedResourcesArmTemplateRootUrl": {
      "value": "https://nzmoestartpublic.blob.core.windows.net/public/start/releases/{TEMPLATESRELEASE}/arm-templates/resources/"
      //"value": "https://nzmoestartpublic.blob.core.windows.net/public/start/releases/0.0/arm-templates/resources/"
    },
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // PARAMETERS: RESOURCE GROUP / NAME TEMPLATE
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // Not required (ARM Template uses [resourceGroup().name]), but if you wish, provide something like
    // {regioncode}-{orgid}-{projectid}-{systemid}-{branchid}-{envid}
    // "resourceNameTemplate": {
    //   "value": "{REPLACE:resourceNameTemplate}"
    // },
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // PARAMETERS: ENVIRONMENT
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // Provide this value from your Build Pipeline (the YAML file).
    "environmentId": {
      "value": "ST" //eg: "BT", "DT", "ST", "UT", "PD" (don't use "PP"...dumb name for Prod Diagnostics...), etc. up till "PR"
    },
    // See Accompanying documentation for what flags can be used here:
    "environmentOverrides": {
      "value": {
        // Usage:
        // * The purpose of these vars are to allow multiple environments to be defined in one file (easier maintainability). 
        // * Define multiple Environments groups. It's your choice of what they are called. The 'environmentId' parmeter, provided
        //   by a build pipeline determines what group of env vars is used.
        // * Use 'default' for the default settings, refining them with env specific vars (ST, PROD, etc.)
        // * Vars are named the same as the environment variables, but *override* any defined outside of them, eg lower down the page.
        // * Important: hey are suitable for Configuration information -- NOT Confidential Information/Secrets.
        // * Tip: for maintainability, Uncomment/use only what you are specifically defining.
        // 
        // "UT": {
        //   // for example:
        //   // "microsoftSqlServersDatabasesResourceSku": "S0"
        // },
        // "PR": {
        //   "microsoftSqlServersDatabasesResourceSku": "S3"
        // },
        "default": {
          // Define what is wanted either here (the 'default' environment)
          // or (preferably), further down, as ARM parameters (which you 
          // presumably already know how to do...
          //
          // "microsoftCacheRedisProvision": false,
          // "microsoftCognitiveServicesAccountsComputerVisionProvision": false,
          // "microsoftCognitiveServicesAccountsCustomVisionProvision": false,
          // "microsoftCognitiveServicesAccountsContentModeratorProvision": false,
          // "microsoftCognitiveServicesAccountsLanguageUnderstandingProvision": false,
          // "microsoftDataFactoryProvision": false,
          // "microsoftDocumentDBDatabaseAccountsProvision": false,
          "microsoftInsightsComponentsProvision": true,
          "microsoftKeyVaultVaultsProvision": true,
          // "microsoftLogicWorkflowsProvision":true,
          // "microsoftMapsAccountsProvision": false,
          // "microsoftServiceBusNamespacesProvision": false,
          // "microsoftServiceBusNamespacesQueuesDefaultProvision": false,
          // "microsoftServiceBusNamespacesTopicsDefaultProvision": false,
          // IMPORTANT: if you enable Databases, you will have to provide both microsoftSqlServersAdministratorLogin and microsoftSqlServersAdministratorLoginPassword parameters further down the page.
          "microsoftSqlServersDatabasesProvision": true,
          // "microsoftSqlServersDatabasesArray": [...see below for an array example...]
          // "microsoftSqlServersDatabasesResourceSku": "Basic", // [Basic,S0,S1,S2] (Basic:7$,S0:25$,S1:$45) 
          // "microsoftSqlServersDatabasesEdition": "Basic" // [Basic|Standard|Premium],
          // "microsoftSqlServersDatabasesMaxSizeBytes": "2147483648", // [104857600,524288000,1073741824,2147483648,5368709120,etc...getting pretty expensive... Default is 2Gb]
          "microsoftStorageStorageAccountsDefaultProvision": true,
          // "microsoftSqlServersDatabasesArray": [...see below for an array example...]
          // "microsoftStorageStorageAccountsDefaultProvision": false,
          // "microsoftWebServerFarmsResourceSku": "S1",  // [F1,D1,B1,S1,S2]. Note that AlwaysOn requires S1, so although money can be saved going lower, it delays testing, and therefore increases cost of waiting ("penny wise, pound foolish...").
          // "microsoftWebServerFarmsResourceSku": 1, // [1,2,3]
          "microsoftWebSitesProvision": true,
          // "microsoftWebSitesKind": "",
          // "microsoftWebSitesArray : ...see below...
          //
          "lastEntry": "" // Not used (frustated hack to counter non-compliant json from forgotten trailing commas)
        }
      }
    },
    // INSTRUCTIONS:
    // * Any variable available above as an environmentOverride parameter is also settable below, as traditional ARM Parameters.
    //   That said, know that if defined in both places, the environmentOverride value will be taken (as it 'overrides' anything else).
    // * In Addition, as stated above, environmentOverrride is not appropriate for sensitive data as the values have to be hard-coded in,
    //   whereas traditional parameters can refer to keyvault settings, using the 'reference' keyword, as demonstrated below
    //   with the SqlServer admin username and password.
    // 
    //
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // PARAMETERS: MULTIPLE WEB SITES
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // If you need to develop more than one Web Site, define an array below (or above in 'environmentOverrides' -- as you see best).
    // As the sites are built, any variable needed beyond the above mentioned attributes will be sourced from the general "microsoftWebSitesxxx"
    // parameters (eg: microsoftWebServerFarmsResourceSku) that (as most vars) can be set as either traditional params or above in 'environmentOverrides'). 
    // IMPORTANT:
    // * each array item *must* have include all the parameters or will fail to compile/execute:
    //   resourceName, resourceNameSuffix, kind, appSettings
    // * as always, don't comment out array items (move them out of the array). 
    //   It's a known Azure bug that it can't handle it and makes for hard to track down errors.
    // "microsoftWebSitesArray": {
    //       // Tip: Do NOT put comments within arrays (creates really difficult to diagnose useless error messages).
    //       // Tip: Each array item requires *all* the following attributes -- even if they contain just an empty string:
    //       // resourceName,  resourceNameSuffix, kind, appSettings
    //     "value": [
    //       {"key":"", resourceName":"", "resourceNameSuffix":"aa", "kind":"", "hostName":"", "databaseResourceName": "", "appSettings":{"akey":"foo!", "bkey":"bar!"} },
    //       {"key":"", resourceName":"", "resourceNameSuffix":"bb", "kind":"functionapp", "hostName":"", "databaseResourceName": "", "appSettings":{"anotherkey":"baz!"} }
    //     ],
    // },
    //
    //
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // PARAMETERS: MULTIPLE DATABASES
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // If you need to develop more than one SqlServer, define an array below (or above in 'environmentOverrides' -- as you see best).
    // As the sites are built, any variable needed beyond the above mentioned attributes will be sourced from the general "microsoftSqlServersDatabasesXXX"
    // parameters (eg: 'microsoftSqlServersDatabasesResourceSku') that (as most vars) can be set as either traditional params or above in 'environmentOverrides'). 
    // IMPORTANT:
    // * each array item *must* have include all the parameters or will fail to compile/execute:
    //   resourceName, resourceNameSuffix, sku, edition, maxSizeBytes
    // * as always, don't comment out array items (move them out of the array). 
    //   It's a known Azure bug that it can't handle it and makes for hard to track down errors.
    // "microsoftSqlServersDatabasesArray": {
    //   "value": 
    //         // Tip: Do NOT put comments within arrays (creates really difficult to diagnose useless error messages).
    //         // Tip: Each array item requires *all* the following attributes -- even if they contain just an empty string:
    //         // name
    //         // resourceName
    //         // resourceNameSuffix
    //         // sku: [Basic|S0|S1|s2]
    //         // edition: [Basic|Standard]
    //         // maxSizeBytes: "104857600", "524288000", "1073741824", "2147483648", "5368709120", "10737418240",...etc... getting expensive.
    //       [
    //       {"key": "DefaultA", "resourceName":"", "resourceNameSuffix":"a", "sku":"Basic", "edition":"Basic", "maxSizeBytes": "104857600"},
    //       {"key": "DefaultB", "resourceName":"", "resourceNameSuffix":"b", "sku":"Basic", "edition":"Basic", "maxSizeBytes": "104857600"}
    //       ]
    // },
    // 
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // PARAMETERS: SERVICE INTEGRATION
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // All systems need to integrate with multiple 3rd party/project/enterprise services, 
    // including:
    // aad, oauthservice, oidcservice, smtpservice, malwaredetectionservice, ipgeoconversionservice 
    // * each array item *must* have include all the parameters or will fail to compile/execute:
    //   name, description, uri, tenantId, clientId, clientSecret, clientMiscConfig, keyVaultResourceId
    // * Whereas name, description, uri, tenantId, clientId, clientMiscConfig, and keyVaultResourceId
    //   are straight forward text, the 'clientSecret' is not. 
    //   Instead, it's a key within the KeyVault referred to within 'keyVaultResourceId'.
    //   NO...much as developers would like that ease of use, there is no way of setting the 
    //   clientSecret as clearText directly in the config file, where it could be duplicated without control.
    //   It would not be much a secret, would it?
    // * At some point in the future, 'clientId' might also be sourced from the keyVault in the 
    //   same was 'clientSecret' -- but currently looking into whether it could be done in an optional way
    //   (eg: maybe prefixing the string with the 'insecure:' could be used to indicate it's not a key?).
    // * 'tenantId' is not required for simple services, but is used  when dealing with AAD, B2C, OIDC, OAuth 
    //   and us used for the AAD/B2C Tenant guid.
    // * as always, don't comment out array items (move them out of the array). 
    //   It's a known Azure bug that it can't handle it and makes for hard to track down errors.
    //  * Example:
    //     "value": [
    //        { "name":"SmtpService",             "description":"sendgrid-based.", "uri": "smtp.sendgrid.net",                            "tenantId":"",    "clientId": "service-integration-smtpservice-clientid",             "clientSecret":"service-integration-smtpservice-clientsecret",  "clientMiscConfig":"{\"port\": \"587\"}",  "keyVaultResourceId":"/subscriptions/<TODO:A SubscriptionId>/resourceGroups/<TODO:A ResourceGroupName>/providers/Microsoft.KeyVault/vaults/<TODO:AKeyVaultResourceName>"},
    //        { "name":"malwareDetectionService", "description":"scanii-based.",   "uri": "https://api.scanii.com",                       "tenantId":"",    "clientId": "service-integration-malwaredetectionervice-clientid",  "clientSecret":"service-integration-smtpservice-clientsecret",  "clientMiscConfig":"",  "keyVaultResourceId":"/subscriptions/<TODO:A SubscriptionId>/resourceGroups/<TODO:A ResourceGroupName>/providers/Microsoft.KeyVault/vaults/<TODO:AKeyVaultResourceName>"},
    //        { "name":"ipGeoConversionService",  "description":"ipstack-based.",  "uri": "http://api.ipstack.com/{1}?access_key={0}",    "tenantId":"",    "clientId": "service-integration-ipgeoconversionservice-clientid",  "clientSecret":"service-integration-smtpservice-clientsecret",  "clientMiscConfig":"",  "keyVaultResourceId":"/subscriptions/<TODO:A SubscriptionId>/resourceGroups/<TODO:A ResourceGroupName>/providers/Microsoft.KeyVault/vaults/<TODO:AKeyVaultResourceName>"}
    //        { "name":"oidcService",             "description":"aad based.",      "uri": "...",                                          "tenantId":"",    "clientId": "...",                                                  "clientSecret":"...",                                           "clientMiscConfig":"",  "keyVaultResourceId":"...."}
    //     ]
    "serviceIntegrationsArray": {
    "value": [
      { "name":"ExampleService",             "description":"Example service demonstrating keyvault seeding of clientId/clientSecret.", "uri": "https://example.website.tld/api/",              "tenantId":"",    "clientId": "service-integration-exampleservice-clientid",             "clientSecret":"service-integration-exampleservice-clientsecret",  "clientMiscConfig":"",  "keyVaultResourceId":"/subscriptions/b81bf4a6-b746-41c2-ac29-9466c74f2b57/resourceGroups/MATA-BASE-0-0-INIT/providers/Microsoft.KeyVault/vaults/matabase00init"}
      ]
    },
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // PARAMETERS: MICROSOFT / SQL / SERVERS
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    // 
    // The following are examples of values derived from the INIT keyVault
    // using the 'reference' keyword, as oppossed to the 'value' keyword.
    // IMPORTANT: The SubscriptionId, ResourceGroup, and KeyVault name will
    // have to be updated as needed to point to the correct Subscription
    // (the target will differ depending on whether one is within a 
    // Test/Dev or Production Subscription).
    //
    // For example:
    // SubscriptionId: 5f813400-5b83-44b0-af8f-5fd04714f1ef
    // ResourceGroup: MATA-RAMP-0-0-INIT
    // KV ResourceName: mataramp00init
    //
    // IMPORTANT:
    // KeyVault keys used are (generally) not arbitrary. 
    // In many cases, they are key names defined by scripts.
    // So, if you are reading from the COMMON KV, look up the variable name
    // as it is defined within the Script that created COMMON RG (ie, the ENV template file)
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    "microsoftSqlServersAdministratorLogin": {
      "reference": {
        "keyVault": {
          "id": "/subscriptions/b81bf4a6-b746-41c2-ac29-9466c74f2b57/resourceGroups/MATA-BASE-0-0-INIT/providers/Microsoft.KeyVault/vaults/matabase00init"
        },
        "secretName": "microsoft-sql-servers-administrator-login-name"
      }
    },
    // -=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
    "microsoftSqlServersAdministratorLoginPassword": {
      "reference": {
        "keyVault": {
          "id": "/subscriptions/b81bf4a6-b746-41c2-ac29-9466c74f2b57/resourceGroups/MATA-BASE-0-0-INIT/providers/Microsoft.KeyVault/vaults/matabase00init"
        },
        "secretName": "microsoft-sql-servers-administrator-login-password"
      }
    }
    //-=-=-=-=-1-=-=-=-=-2-=-=-=-=-3-=-=-=-=-4-=-=-=-=-5-=-=-=-=-6-=-=-=-=-7-=-=-=-=-8
  }
}