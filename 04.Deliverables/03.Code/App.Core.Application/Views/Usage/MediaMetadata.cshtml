@model App.Core.Application.Models.MediaUpload
@{
    ViewBag.Title = "Media";
    ViewBag.Subtitle = "Metadata about uploaded Media";
}
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Subtitle</h3>

Just about all systems deal with uploaded media at some point in time -- whether we're talking about User Avatars, background images, project resource,s images, documents, etc. 

All uploaded media *must* be scanned for malware before it is persisted, in order to ensure that this system does its utmost to not subsequently become a propagator of malware.

<h3>Media Upload Form</h3>

The following is a basic example form to upload media:

<p>
    @using (Html.BeginForm("MediaMetadata", "Usage", null, FormMethod.Post, new {enctype = "multipart/form-data"})) 
    {
        @Html.AntiForgeryToken()
    
        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                
            <div class="form-group">
                @Html.LabelFor(model => model.DataClassification, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(
                        x => x.DataClassification,
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DataClassification, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SomeCustomData, htmlAttributes: new
           {
               @class = "control-label col-md-2"
           })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SomeCustomData, new
               {
                   htmlAttributes = new
                   {
                       @class = "form-control"
                   }
               })
                    @Html.ValidationMessageFor(model => model.SomeCustomData, "", new
               {
                   @class = "text-danger"
               })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Media", new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    <input type="file" id="Media" name="file" />
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Upload" class="btn btn-default" />
                    @ViewBag.Message
                </div>
            </div>
        </div>
    }</p>



<h3>API Examples</h3>

The following are some example api calls, using OData terms such as $skip, $top, $inlinecount, $expand:

<ul>
    <li><a target="_apis" href="~/OData/core/mediametadata/">MediaMetadata only</a></li>
    <li><a target="_apis" href="~/OData/core/mediametadata/?$count=true&$top=0">MediaMetadata count</a></li>
    <li><a target="_apis" href="~/OData/core/mediametadata/?$top=3">MediaMetadata, Take 3...</a></li>
    <li><a target="_apis" href="~/OData/core/mediametadata/?$top=2">MediaMetadata, Take 2...</a></li>
    <li><a target="_apis" href="~/OData/core/mediametadata/?$top=1">MediaMetadata, Take only 11.</a></li>
    <li><a target="_apis" href="~/OData/core/mediametadata/?$skip=2&$top=3">MediaMetadata, Skip 2, Take 1</a></li>
    <li><a target="_apis" href="~/OData/core/mediametadata/?$expand=DataClassification">MediaMetadata, with DataClassification</a></li>
</ul>


