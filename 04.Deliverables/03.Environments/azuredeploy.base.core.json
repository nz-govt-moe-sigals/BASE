{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    /*holly shit! One can comment in ARMS, even if it is not valid JSON!*/
     "parameters": {
        "resourceMode": {
            "metadata": {
                "description": "Incremental..."
            },
            "allowedValues": [
                "Incremental"
            ],
            "defaultValue": "Incremental",
            "type": "string"
        },
        "resourceLocation": {
            "metadata": {
                "description": "The default location within which to develop the Resources Group and its child Resources, unless specifically defined otherwise (not all resources - such as SqlServers - are available in all resources)."
            },
            "type": "string",
            "allowedValues": [
                "Australia East",
                "Australia Southeast"
            ],
            "defaultValue": "[resourceGroup().location]"
        },
        "resourceNameTemplate": {
            "metadata": {
                "description": "The default name template to use when developing the names of newly created Resources (eg: 'MYORG-MYAPP-{ENVID}-{BRANCHID}-{RESOURCETYPE}')'."
            },
            "type": "string",
            "minLength": 6,
            "maxLength": 24
        },
        "armTemplateRootUrl": {
            "metadata": {
                "description": "The http based base url from which to download referenced ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string",
            "defaultValue": ""
        },
        "armTemplateRootSas": {
            "metadata": {
                "description": "The (optional) Single Access Signature (SAS) required to append to ARM Template Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string",
            "defaultValue": ""
        },
        "armTemplateParameterRootUrl": {
            "metadata": {
                "description": "The http based base url from which to download referenced ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string",
            "defaultValue": ""
        },
        "armTemplateParameterRootSas": {
            "metadata": {
                "description": "The (optional) Single Access Signature (SAS) required to append to ARM Template Paramter Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string",
            "defaultValue": ""
        },


        // ----------------------------------------------------------------------
        // General StorageAccount Parameters 
        // ----------------------------------------------------------------------


        "storageAccountResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },
        "storageAccountTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },

        // ----------------------------------------------------------------------
        // Specific Storage Accounts Parameters 
        // ----------------------------------------------------------------------

        "storageAccountDeploymentResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountDiagnosticsResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountBackupResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountMediaResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountMedia2ResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },

        // ----------------------------------------------------------------------
        // SQL Server Firewall Rule Parameters
        // ----------------------------------------------------------------------

        "sqlServerResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiasoutheast",
                "australiaeast",
                "East US",
                "South Central US",
                "Southeast Asia",
                "West Central US",
                "West Europe",
                "West US 2"
            ],
            "metadata": {
                "description": "The location for the SQL service. This is parameterised because SQL servers cannot be deployed in all regions for subscription types."
            }
        },
        "sqlServerAdministratorLogin": {
            "metadata": {
                "description": "Required. Administrator Login. Required for when creating new SqlServers."
            },
            "type": "securestring",
            "minLength": 6
        },
        "sqlServerAdministratorLoginPassword": {
            "metadata": {
                "description": "Required. Administrator Login's Password. Required when creating new SqlServers."
            },
            "type": "securestring",
            "minLength": 12
        },

        "sqlServerTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },

        // ----------------------------------------------------------------------
        // SQL Server Firewall Rule Parameters
        // Has dependency on SQL Server being there first.
        // ----------------------------------------------------------------------

        "sqlServerFirewallRuleResourceName": {
            "type": "string",
            "minLength": 1,
            "defaultValue":"AllowAzure",
            "metadata": {
                "description": "Optional. Default name is 'AllowAzure'."
            }
        },
        "sqlServerFirewallRuleResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },
        "sqlServerFirewallRuleStartIpAddress": {
            "type": "string",
            "metadata": {
                "description": "Ensure the Database has firewall rules in place. Tip: The range should be permissive (0.0.0.0 - 0.0.0.0), controlling access using AzureAD and integrated security."
            },
            "defaultValue": "0.0.0.0"
        },
        "sqlServerFirewallRuleEndIpAddress": {
            "type": "string",
            "metadata": {
                "description": "Ensure the Database has firewall rules in place. Tip: The range should be permissive (0.0.0.0 - 0.0.0.0), controlling access using AzureAD and integrated security."
            },
            "defaultValue": "0.0.0.0"
        },



        "sqlServerFirewallRuleTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },

        // ----------------------------------------------------------------------
        // SQL Server Auditing Policies Parameters
        // Has dependency on SQL Server being there first.
        // ----------------------------------------------------------------------




        "sqlServerAuditingPoliciesResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "sqlServerAuditingPoliciesResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Souteast"
            ],
            "metadata": {
                "description": "The location for the Auditing Policies."
            }
        },

        
        "sqlServerAuditingPoliciesTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },

        // ----------------------------------------------------------------------
        // SQL Server Database Parameters
        // Has dependency on SQL Server being there first.
        // ----------------------------------------------------------------------

        "sqlServerDatabaseResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "sqlServerDatabaseResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Souteast"
            ],
            "metadata": {
                "description": "The location for the Database. Can't be Nearshore Australia."
            }
        },
        "sqlServerDatabaseResourceSku": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
              "Basic",
              "S0",
              "S1",
              "S2"
            ],
            "metadata": {
                "description": "Describes the performance level of the Database. Default is Basic ($8/m, 5 DTU, sufficient for 2GB). S0 is plenty at 25$/m. 10 DTUs, 250Gb. "
              }
            },


            "sqlServerDatabaseZoneRedundant": {
                "type": "bool",
                "defaultValue": false
            },
            "sqlServerDatabaseEdition": {
                "type": "string",
                "defaultValue": "Standard",
                "allowedValues": [
                    "Basic",
                    "Standard",
                    "Premium"
                ]
            },
            "sqlServerDatabaseCollation": {
                "type": "string",
                "minLength": 1,
                "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
            },
            "sqlServerDatabaseMaxSizeBytes": {
                "type": "string",
                "defaultValue": "268435456000"
            },

            "sqlServerDatabaseTags": {
                "type": "object",
                "defaultValue": {},
                "metadata": {
                    "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
                }
            },
    
            // ----------------------------------------------------------------------
            // Web ServerFarm Parameters
            // ----------------------------------------------------------------------
    


        "webServerFarmResourceName": {
            "type": "string",
            "defaultValue": "",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "webServerFarmResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Souteast"
            ],
            "metadata": {
                "description": "The location for the Database."
            }
        },

        "webServerFarmResourceSku": {
            "metadata": {
                "description": "App Service server pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            },
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "F1",
                "D1",
                "B1",
                "S1",
                "S2"
            ]
        },
        "webServerFarmNumberOfWorkers": {
            "type": "int",
            "minValue": 1,
            "maxValue": 3,
            "defaultValue": 1
        },

        
        "webServerFarmTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },

        // ----------------------------------------------------------------------
        // Web Certificate Parameters
        // Has dependency on Web ServerFarm being there first.
        // ----------------------------------------------------------------------




        "webCertificateResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },

        "webCertificateResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Southeast"
            ],
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically."
            }
        },

        "webCertificateBase64": {
            "type": "string",
            "metadata": {
                "description": "Optional: Base64 encoded PFX certificate for appService Web Site SSL. Required to match the information within appServiceWebSiteHostName."
            }
        },
        "webCertificatePassword": {
            "type": "securestring",
            "metadata": {
                "description": "Optional: Password for the appService Web Site SSL Pfx Certificate. Only required if `sslCertificateBase64` is provided."
            }
        },

        "webCertificateTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },

        // ----------------------------------------------------------------------
        // Web Certificate Parameters
        // Has dependency on Web ServerFarm being there first.
        // ----------------------------------------------------------------------




        "webSiteHostBindingResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "webSiteHostBindingResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Southeast"
            ],
            "metadata": {
                "description": "The location for the Certificate, if it can be set."
            }
        },
        "webSiteHostBindingHostName": {
            "type": "string",
            "metadata": {
                "description": "."
            }
        },
        "webSiteHostBindingCertificateThumbprint": {
            "type": "string",
            "metadata": {
                "description": "."
            }
        },

        "webSiteHostBindingTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },

        // ----------------------------------------------------------------------
        // Web Site Parameters
        // Has dependency on Web ServerFarm being there first.
        // ----------------------------------------------------------------------


        "webSiteResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional: Defined automatically according to naming convention but can be overriden here"
            }
        },
        "webSiteResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Southeast"
            ],
            "metadata": {
                "description": "The location for the Certificate, if it can be set."
            }
        },
        "webSiteResourceSku": {
            "metadata": {
                "description": ""
            },
            "type": "string",
            "defaultValue": "X",
            "allowedValues": [
                "X"
            ]
        },
        "webSiteAlwaysOn": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteDetailedErrorLoggingEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteLogsDirectorySizeLimit": {
            "type": "int",
            "defaultValue": 35,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteHttpLoggingEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteRemoteDebuggingEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteRemoteDebuggingVersion": {
            "type": "string",
            "defaultValue": "VS2012",
            "allowedValues": [
                "VS2012",
                "VS2013"
            ],
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteRequestTracingEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteWebSocketsEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteConfigAppSettings": {
            "type": "object",
            "defaultValue": {
              "ExampleKey" :"exampleValue"
            },
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target site as AppSettings."
            }
          },
          "webSiteTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },

        "_invalidValidSqlServerResourceLocation": {
            "type":"array",
            "defaultValue": ["Australia East","Australia Southeast", "australiaeast", "australiasoutheast"]
        }
    },


        // ----------------------------------------------------------------------
        // ----------------------------------------------------------------------
        // Variables
        // ----------------------------------------------------------------------
        // ----------------------------------------------------------------------


    "variables": {
        "metadata": {
            "comments00": "So...Templates are a set of sequential parameters, variables, resources, output sections for a reason.",
            "conventions":{
                "useVariables": "Using the Variables to shape the incoming Parameters, using Functions.",
                "complexVariables": "Variables are grouped as complex objects. ",
                "complexVariablesChildProperties": "Note that when later referencing child properties of complex variables, the dot is *outside* the top var name: `variables('top').childProperty`",
                "lowerCaseUrls": "Blob storage urls are case-sensitive: so convention is to keep arm template and parameter filenames lower case."
            }
        },
        "tmp": {
            "tmpResourceLocation1": "[if (not (empty (parameters('resourceLocation'))), parameters('resourceLocation'), resourceGroup().location)]",
            "tmpSqlResourceLocation1": "[if (not (empty (parameters('sqlServerResourceLocation'))), parameters('sqlServerResourceLocation'), if (not (empty (parameters('resourceLocation'))), parameters('resourceLocation'), resourceGroup().location))]"
        },
        "resource": {
            "comment": "A collection of variables for use within this template (and any linked child templates).",
            "resourceNamePrefix": "[toLower('azuredeploy.base.core')]",
            "uniqueResourceId": "[uniqueString(resourceGroup().id)]",
            "resourceMode": "[parameters('resourceMode')]",
            "resourceLocation": "[if (not (empty (parameters('resourceLocation'))), parameters('resourceLocation'), resourceGroup().location)]",
            "armTemplateRootUrl": "[parameters('armTemplateRootUrl')]",
            "armTemplateParameterRootUrl": "[parameters('armTemplateParameterRootUrl')]",
            "resourceNameTemplate": "[replace(parameters('resourceNameTemplate'),'{RESOURCE_TYPE}','{RT}')]"
        },
        "storageAccount": {
            "deployment": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for system diagnostics Backup storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.deployment')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount.deployment', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[take( toLower( replace ( replace( replace( if (not (empty (parameters('storageAccountDiagnosticsResourceName'))), parameters('storageAccountDiagnosticsResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'SA_DEPLOY'),'-',''),'_','')),24)]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "tags": "[parameters('storageAccountTags')]"
            },
            "diagnostics": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for system diagnostics Backup storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.diagnostics')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount.diagnostics', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[take( toLower( replace ( replace( replace( if (not (empty (parameters('storageAccountDiagnosticsResourceName'))), parameters('storageAccountDiagnosticsResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'SA_DIAG'),'-',''),'_','')),24)]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "tags": "[parameters('storageAccountTags')]"
            },
            "backups": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for Backup storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.backups')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount.backups', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[take( toLower( replace ( replace( replace( if (not (empty (parameters('storageAccountBackupResourceName'))), parameters('storageAccountBackupResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'SA_BACKUP'),'-',''),'_','')),24)]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "tags": "[parameters('storageAccountTags')]"
            },
            "media": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for Media storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.media')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount.media', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[take( toLower( replace ( replace( replace( if (not (empty (parameters('storageAccountMediaResourceName'))), parameters('storageAccountMediaResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'SA_MEDIA'),'-',''),'_','')),24)]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "tags": "[parameters('storageAccountTags')]"
            },
            "media2": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for Media storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.media2')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount.media2', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[take( toLower( replace( replace( replace( if (not (empty (parameters('storageAccountMedia2ResourceName'))), parameters('storageAccountMedia2ResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'SA_MEDIA_2'),'-',''),'_','')),24)]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "tags": "[parameters('storageAccountTags')]"
            }
        },
        "sql": {
            "server": {
                "comment": "A collection of variables for passing to the SqlServer ARM Template -- via the proxy of the sqlServerDatabase ARM that depends on it.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.sql.server')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.sql.server', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.sql.server', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace( variables('resource').resourceNameTemplate, '{RT}', 'SQLSERVER')]",
                "resourceLocation": "[if (not(contains(parameters('_invalidValidSqlServerResourceLocation'), variables('tmp').tmpSqlResourceLocation1)), variables('tmp').tmpSqlResourceLocation1,'Southeast Asia')]",
                "administrator": {
                    "login": "[parameters('sqlServerAdministratorLogin')]",
                    "loginPassword": "[parameters('sqlServerAdministratorLoginPassword')]"
                },
                "tags": "[parameters('sqlServerTags')]",


                "firewallRule": {
                    "openToAzure": {
                        "comment": "A collection of variables for passing to the SqlServerFirewallRule ARM Template.",
                        "id": "[concat( variables('resource').resourceNamePrefix,'.sql.server','.firewallRule.openToAzure')]",
                        "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.sql.server.firewallrule', '.json', parameters('armTemplateRootSas'))]",
                        "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.sql.server.firewallrule.opentoazure', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                        "resourceName": "[concat( replace( variables('resource').resourceNameTemplate, '{RT}', 'SQLSERVER'),'/','rules.opentoazure')]",
                        "resourceLocation": "[if (not (empty (parameters('sqlServerFirewallRuleResourceLocation'))), parameters('sqlServerFirewallRuleResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                        "startIpAddress": "[parameters('sqlServerFirewallRuleStartIpAddress')]",
                        "endIpAddress": "[parameters('sqlServerFirewallRuleEndIpAddress')]",
                        "tags": "[parameters('sqlServerFirewallRuleTags')]"
                    }
                },
                "database": {
                    "comment": "A collection of variables for passing to the SqlServerDatabase ARM Template.",
                    "id": "[concat( variables('resource').resourceNamePrefix,'.sql.server.database')]",
                    "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.sql.server.database', '.json', parameters('armTemplateRootSas'))]",
                    "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.sql.server.database', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                    "resourceName": "[replace( if (not (empty (parameters('sqlServerDatabaseResourceName'))), parameters('sqlServerDatabaseResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'SQLSERVER/DATABASE')]",
                    "resourceLocation": "[if (not (empty (parameters('sqlServerDatabaseResourceLocation'))), parameters('sqlServerDatabaseResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                    "resourceSku": "[parameters('sqlServerDatabaseResourceSku')]",
                    "collation": "[parameters('sqlServerDatabaseCollation')]",
                    "edition": "[parameters('sqlServerDatabaseEdition')]",
                    "maxSizeBytes": "[parameters('sqlServerDatabaseMaxSizeBytes')]",
                    "zoneRedundant": "[parameters('sqlServerDatabaseZoneRedundant')]",
                    "tags": "[parameters('sqlServerDatabaseTags')]"
                }
            },
            "auditingPolicies": {
                "comment": "A collection of variables for passing to the SqlServerAuditingPolicies ARM Template.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.sqlServer.auditingPolicies')]",
                "resourceName": "[replace( if (not (empty (parameters('sqlServerAuditingPoliciesResourceName'))), parameters('sqlServerAuditingPoliciesResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'SQLSERVER_AUDITING_POLICIES')]",
                "resourceLocation": "[if (not (empty (parameters('sqlServerAuditingPoliciesResourceLocation'))), parameters('sqlServerAuditingPoliciesResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "tags": "[parameters('sqlServerAuditingPoliciesTags')]"
            }
        },
        "web": {
            "serverFarm": {
                "comment": "A collection of variables for passing to the webServer  ARM Template.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.web.appServicePan' )]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.web.serverfarm', '.json' , parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.web.serverfarm', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace( if (not (empty (parameters('webServerFarmResourceName'))), parameters('webServerFarmResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'WEB_SERVER_FARM')]",
                "resourceLocation": "[if (not (empty (parameters('webServerFarmResourceLocation'))), parameters('webServerFarmResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceSku": "[parameters('webServerFarmResourceSku')]",
                "numberOfWorkers": "[parameters('webServerFarmNumberOfWorkers')]",
                "tags": "[parameters('webServerFarmTags')]"
            },
            "site": {
                "id": "[concat( variables('resource').resourceNamePrefix,'.web.site' )]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.web.site', '.json' , parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.web.site', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace( if (not (empty (parameters('webSiteResourceName'))), parameters('webSiteResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'WEB_SITE')]",
                "resourceLocation": "[if (not (empty (parameters('webSiteResourceLocation'))), parameters('webSiteResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceSku": "[parameters('webSiteResourceSku')]",
                "serverFarmResourceId": "TODO",
                "mode": "MODE:TODO",
                "alwaysOn": "[parameters('webSiteAlwaysOn')]",
                "detailedErrorLoggingEnabled": "[parameters('webSiteDetailedErrorLoggingEnabled')]",
                "logsDirectorySizeLimit": "[parameters('webSiteLogsDirectorySizeLimit')]",
                "httpLoggingEnabled": "[parameters('webSiteHttpLoggingEnabled')]",
                "remoteDebuggingEnabled": "[parameters('webSiteRemoteDebuggingEnabled')]",
                "remoteDebuggingVersion": "[parameters('webSiteRemoteDebuggingVersion')]",
                "requestTracingEnabled": "[parameters('webSiteRequestTracingEnabled')]",
                "webSocketsEnabled": "[parameters('webSiteWebSocketsEnabled')]",
                "config": {
                    "appSettings": "[parameters('webSiteConfigAppSettings')]"
                },
                "tags": "[parameters('webSiteTags')]",

                "hostBinding": {
                    "comments": "",
                    "resourceType": "Microsoft.Web/sites/hostNameBindings",
                    "resourceName": "[concat(replace( if (not (empty (parameters('webSiteHostBindingResourceName'))), parameters('webSiteHostBindingResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'WEB_SITE'),'/rule')]",
                    "resourceLocation": "[if (not (empty (parameters('webSiteHostBindingResourceLocation'))), parameters('webSiteHostBindingResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                    "hostName": "[parameters('webSiteHostBindingHostName')]",
                    "thumbprint": "[parameters('webSiteHostBindingCertificateThumbprint')]",
                    "tags": "[parameters('webSiteHostBindingTags')]"
                }


                
            },
            "certificate": {
                "resourceType": "Microsoft.Web/certificates",
                "resourceName": "[replace( if (not (empty (parameters('webCertificateResourceName'))), parameters('webCertificateResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'WEB_CERTIFICATE')]",
                "resourceLocation": "[coalesce(parameters('webCertificateResourceLocation'), variables('resource').resourceLocation, resourceGroup().location)]",
                "pfxBlob": "[coalesce(parameters('webCertificateBase64'),'ERROR:NO PFX BLOB PROVIDED')]",
                "password": "[coalesce(parameters('webCertificatePassword'),'ERROR:NO PFX PASSWORD PROVIDED')]",
                "tags": "[parameters('webCertificateTags')]"
            }
        }
    },
        // ----------------------------------------------------------------------
        // ----------------------------------------------------------------------
        // Resources
        // ----------------------------------------------------------------------
        // ----------------------------------------------------------------------
        "resources": [
        {
            "comments": "Ensures a Resource Group scoped unique backup Storage Account (for Db)",
            "name": "[variables('storageAccount').deployment.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').deployment.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').deployment.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').deployment.resourceLocation]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').deployment.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique backup Storage Account (for Db)",
            "name": "[variables('storageAccount').diagnostics.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').diagnostics.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').diagnostics.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').diagnostics.resourceLocation]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').diagnostics.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique Database Backups Storage Account",
            "name": "[variables('storageAccount').backups.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').backups.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').backups.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').backups.resourceLocation]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').backups.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique Media Storage Account",
            "name": "[variables('storageAccount').media.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').media.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').media.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').media.resourceLocation]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').media.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique Media (2) Storage Account",
            "name": "[variables('storageAccount').media2.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').media2.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').media2.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').media2.resourceLocation]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').media2.tags]"
                    }
                }
            }
        },


        {
            "comments": "Ensure a Resource Group scoped SqlServer. Is a dependency for the subsequent deployment of the FirewallRule, and the SqlServerDatabase.",
            "type": "Microsoft.Resources/deployments",
            "name": "[variables('sql').server.id]",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sql').server.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerResourceName": {
                        "value": "[variables('sql').server.resourceName]"
                    },
                    "sqlServerResourceLocation": {
                        "value": "[variables('sql').server.resourceLocation]"
                    },
                    "sqlServerAdministratorLogin": {
                        "value": "[variables('sql').server.administrator.login]"
                    },
                    "sqlServerAdministratorLoginPassword": {
                        "value": "[variables('sql').server.administrator.loginPassword]"
                    },
                    "sqlServerTags": {
                        "value": "[variables('sql').server.tags]"
                    }
                }
            }
        },

        {
            "dependsOn": ["[variables('sql').server.id]"],
            "comments": "Ensures a Resource Group scoped Database Firewall Rule. Depends on `SqlServer` database being ensured as deployed first.",
            "name": "[variables('sql').server.firewallRule.openToAzure.id]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sql').server.firewallRule.openToAzure.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerFirewallRuleResourceName": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.resourceName]"
                    },
                    "sqlServerFirewallRuleResourceLocation": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.resourceLocation]"
                    },
                    "sqlServerFirewallRuleStartIpAddress": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.startIpAddress]"
                    },
                    "sqlServerFirewallRuleEndIpAddress": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.endIpAddress]"
                    },
                    "sqlServerFirewallRuleTags": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.tags]"
                    }
                }
            }
        },
        {
            "dependsOn": [
                "[variables('sql').server.id]",
                "[variables('sql').server.firewallRule.openToAzure.id]"
            ],
            "comments": "Ensures a (blank) primary Database is deployed. Note: This should not be necessary (as an app should use DbAsCode/CodeFirst to create it on first run)...but it allows for the setting of collation, and other properties.",
            "name": "[variables('sql').server.database.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sql').server.database.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerDatabaseResourceName": {
                        "value": "[variables('sql').server.database.resourceName]"
                    },
                    "sqlServerDatabaseResourceLocation": {
                        "value": "[variables('sql').server.database.resourceLocation]"
                    },
                    "sqlServerDatabaseResourceSku": {
                        "value": "[variables('sql').server.database.resourceSku]"
                    },
                    "sqlServerDatabaseCollation": {
                        "value": "[variables('sql').server.database.collation]"
                    },
                    "sqlServerDatabaseEdition": {
                        "value": "[variables('sql').server.database.edition]"
                    },
                    "sqlServerDatabaseZoneRedundant": {
                        "value": "[variables('sql').server.database.zoneRedundant]"
                    },
                    "sqlServerDatabaseMaxSizeBytes": {
                        "value": "[variables('sql').server.database.maxSizeBytes]"
                    },
                    "sqlServerDatabaseTags": {
                        "value": "[variables('sql').server.database.tags]"
                    }
                }
            }
            },

            {
                "comments": "Ensures a Resource Group scoped unique App Service Plan",
                "name": "[variables('web').serverFarm.id]",
                "apiVersion": "2017-05-10",
                "type": "Microsoft.Resources/deployments",
                "properties": {
                    "mode": "Incremental",
                    "templateLink": {
                        "uri": "[variables('web').serverFarm.armUrl]",
                        "contentVersion": "1.0.0.0"
                    },
                    "parameters": {
                        "webServerFarmResourceName": {
                            "value": "[variables('web').serverFarm.resourceName]"
                        },
                        "webServerFarmResourceLocation": {
                            "value": "[variables('web').serverFarm.resourceLocation]"
                        },
                        "webServerFarmResourceSku": {
                            "value": "[variables('web').serverFarm.resourceSku]"
                        },
                        "webServerFarmNumberOfWorkers": {
                            "value": "[variables('web').serverFarm.numberOfWorkers]"
                        },
                        "webServerFarmTags": {
                            "value": "[variables('web').serverFarm.tags]"
                        }
                    }
                }
            },
            {
                "dependsOn": [
                    "[variables('web').serverFarm.id]"
                ],
                "comments": "Ensures a Resource Group scoped web site is deployed",
                "name": "[variables('web').site.id]",
                "apiVersion": "2017-05-10",
                "type": "Microsoft.Resources/deployments",
                "properties": {
                    "mode": "Incremental",
                    "templateLink": {
                        "uri": "[variables('web').site.armUrl]",
                        "contentVersion": "1.0.0.0"
                    },
                    "parameters":{
                        "webSiteResourceName": {
                            "value": "[variables('web').site.resourceName]"
                        },
                        "webSiteResourceLocation": {
                            "value": "[variables('web').site.resourceLocation]"
                        },
                        "webSiteResourceSku": {
                            "value": "[variables('web').site.resourceSku]"
                        },
                        "webSiteWebServerFarmResourceId": {
                            "value": "[reference(variables('web').serverFarm.id).outputs.resourceId.value]"
                        },
                        "webSiteAlwaysOn": {
                            "value": "[variables('web').site.alwaysOn]"
                        },
                        "webSiteDetailedErrorLoggingEnabled": {
                            "value": "[variables('web').site.detailedErrorLoggingEnabled]"
                        },
                        "webSiteLogsDirectorySizeLimit": {
                            "value": "[variables('web').site.logsDirectorySizeLimit]"
                        },
                        "webSiteRemoteDebuggingEnabled": {
                            "value": "[variables('web').site.remoteDebuggingEnabled]"
                        },
                        "webSiteRemoteDebuggingVersion": {
                            "value": "[variables('web').site.remoteDebuggingVersion]"
                        },
                        "webSiteRequestTracingEnabled": {
                            "value": "[variables('web').site.requestTracingEnabled]"
                        },
                        "webSiteWebSocketsEnabled": {
                            "value": "[variables('web').site.webSocketsEnabled]"
                        },
                        "webSiteConfigAppSettings": {
                            "value": "[variables('web').site.config.appSettings]"
                        }
                    }
                }
            }
    ],
    "outputs": {
        "uniqueResourceId": {
            "type": "string",
            "value": "[variables('resource').uniqueResourceId]",
            "metadata": {
                "description": "The ResourceGroup scoped unique 13 character Id."
            }
        },
        "resourceName": {
            "type": "string",
            "value": "[variables('resource').resourceNameTemplate]"
        }
    }
}