{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceLocation": {
            "metadata": {
                "description": "The default location within which to develop the Resources Group and its child Resources, unless specifically defined otherwise (not all resources - such as SqlServers - are available in all resources)."
            },
            "type": "string",
            "allowedValues": [
                "Australia East",
                "Australia Southeast"
            ],
            "defaultValue": "[resourceGroup().location]"
        },
        "resourceNameTemplate": {
            "metadata": {
                "description": "The default name template to use when developing the names of newly created Resources (eg: 'MYORG-MYAPP-{ENVID}-{BRANCHID}-{RESOURCETYPE}')'."
            },
            "type": "string",
            "minLength": 6
        },
        "armTemplateRootUrl": {
            "metadata": {
                "description": "The http based base url from which to download referenced ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string",
            "defaultValue": ""
        },
        "armTemplateRootSas": {
            "metadata": {
                "description": "The (optional) Single Access Signature (SAS) required to append to ARM Template Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string",
            "defaultValue": ""
        },
        "armTemplateParameterRootUrl": {
            "metadata": {
                "description": "The http based base url from which to download referenced ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string",
            "defaultValue": ""
        },
        "armTemplateParameterRootSas": {
            "metadata": {
                "description": "The (optional) Single Access Signature (SAS) required to append to ARM Template Paramter Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string",
            "defaultValue": ""
        },
        "storageAccountResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },
        "storageAccountDiagnosticsResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountBackupResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountMediaResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountPrivateAccessResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },









        "sqlServerResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "sqlServerResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "East US",
                "South Central US",
                "Southeast Asia",
                "West Central US",
                "West Europe",
                "West US 2"
            ],
            "metadata": {
                "description": "The location for the SQL service. This is parameterised because SQL servers cannot be deployed in all regions for subscription types."
            }
        },
        "sqlServerSku": {
            "metadata": {
                "description": "App Service server pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            },
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "S0",
                "S1",
                "S2"
            ]
        },
        "sqlServerAdministratorLogin": {
            "metadata": {
                "description": "Required. Administrator Login. Required for when creating new SqlServers."
            },
            "type": "securestring",
            "minLength": 6
        },
        "sqlServerAdministratorLoginPassword": {
            "metadata": {
                "description": "Required. Administrator Login's Password. Required when creating new SqlServers."
            },
            "type": "securestring",
            "minLength": 12
        },



        "sqlServerFirewallRuleResourceName": {
            "type": "string",
            "minLength": 1,
            "defaultValue":"AllowAzure",
            "metadata": {
                "description": "Optional. Default name is 'AllowAzure'."
            }
        },
        "sqlServerFirewallRuleResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },
        "sqlServerFirewallRuleStartIpAddress": {
            "type": "string",
            "metadata": {
                "description": "Ensure the Database has firewall rules in place. Tip: The range should be permissive (0.0.0.0 - 0.0.0.0), controlling access using AzureAD and integrated security."
            },
            "defaultValue": "0.0.0.0"
        },
        "sqlServerFirewallRuleEndIpAddress": {
            "type": "string",
            "metadata": {
                "description": "Ensure the Database has firewall rules in place. Tip: The range should be permissive (0.0.0.0 - 0.0.0.0), controlling access using AzureAD and integrated security."
            },
            "defaultValue": "0.0.0.0"
        },







        "sqlServerAuditingPoliciesResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "sqlServerAuditingPoliciesResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Souteast"
            ],
            "metadata": {
                "description": "The location for the Auditing Policies."
            }
        },

        
        "sqlServerDatabaseResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "sqlServerDatabaseResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Souteast"
            ],
            "metadata": {
                "description": "The location for the Database."
            }
        },


        "webServerFarmResourceName": {
            "type": "string",
            "defaultValue": "",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "webServerFarmResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Souteast"
            ],
            "metadata": {
                "description": "The location for the Database."
            }
        },

        "webServerFarmSku": {
            "metadata": {
                "description": "App Service server pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            },
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "F1",
                "D1",
                "B1",
                "S1",
                "S2"
            ]
        },


        

        "webCertificateResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },

        "webCertificateResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Southeast"
            ],
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically."
            }
        },

        "webCertificateBase64": {
            "type": "string",
            "metadata": {
                "description": "Optional: Base64 encoded PFX certificate for appService Web Site SSL. Required to match the information within appServiceWebSiteHostName."
            }
        },
        "webCertificatePassword": {
            "type": "securestring",
            "metadata": {
                "description": "Optional: Password for the appService Web Site SSL Pfx Certificate. Only required if `sslCertificateBase64` is provided."
            }
        },

        "webSiteHostBindingResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "webSiteHostBindingResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Southeast"
            ],
            "metadata": {
                "description": "The location for the Certificate, if it can be set."
            }
        },
        "webSiteHostBindingHostName": {
            "type": "string",
            "metadata": {
                "description": "."
            }
        },
        "webSiteHostBindingCertificateThumbprint": {
            "type": "string",
            "metadata": {
                "description": "."
            }
        },


        "webSiteResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional: Defined automatically according to naming convention but can be overriden here"
            }
        },
        "webSiteResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "Australia East",
                "Australia Southeast"
            ],
            "metadata": {
                "description": "The location for the Certificate, if it can be set."
            }
        }
    },
    "variables": {
        "metadata": {
            "comments00": "So...Templates are a set of sequential parameters, variables, resources, output sections for a reason.",
            "comments01": "Using the Variables to shape the incoming Parameters, using Functions.",
            "comments02": "Variables are grouped as complex objects. Note that when later referencing",
            "comments03": "child properties, the dot is *outside* the top var name: `variables('top').childProperty`"
        },
        "resource": {
            "comment": "A collection of variables for use within this template (and any linked child templates).",
            "resourceNamePrefix": "azuredeploy.base.core",
            "uniqueResourceId": "[uniqueString(resourceGroup().id)]",
            "resourceLocation": "[if (not (equals (parameters('resourceLocation'),'')), parameters('resourceLocation'), resourceGroup().location)]",
            "armTemplateRootUrl": "[parameters('armTemplateRootUrl')]",
            "armTemplateParameterRootUrl": "[parameters('armTemplateParameterRootUrl')]",
            "resourceNameTemplate": "[parameters('resourceNameTemplate')]"
        },
        "storageAccount": {
            "diagnostics": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for system diagnostics Backup storage.",
                "id": "[concat(variables('resource').resourceNamePrefix,'.storageAccount.diagnostics')]",
                "armUrl": "[concat(variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount.diagnostics', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(if (not (equals (parameters('storageAccountDiagnosticsResourceName'),'')), parameters('storageAccountDiagnosticsResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'SA_DIAGNOSTICS')]",
                "resourceLocation": "[if (not (equals (parameters('storageAccountResourceLocation'), '')), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]"
            },
            "backups": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for Backup storage.",
                "id": "[concat(variables('resource').resourceNamePrefix,'.storageAccount.backups')]",
                "armUrl": "[concat(variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount.backups', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(if (not (equals (parameters('storageAccountBackupResourceName'),'')), parameters('storageAccountBackupResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'SA_BACKUPS')]",
                "resourceLocation": "[if (not (equals (parameters('storageAccountResourceLocation'), '')), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]"
            },
            "media": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for Media storage.",
                "id": "[concat(variables('resource').resourceNamePrefix,'.storageAccount.media')]",
                "armUrl": "[concat(variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount.media', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(if (not (equals (parameters('storageAccountMediaResourceName'),'')), parameters('storageAccountMediaResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'SA_MEDIA')]",
                "resourceLocation": "[if (not (equals (parameters('storageAccountResourceLocation'), '')), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]"
            },
            "private": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for Media storage.",
                "id": "[concat(variables('resource').resourceNamePrefix,'.storageAccount.private')]",
                "armUrl": "[concat(variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.storageAccount.private', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(if (not (equals (parameters('storageAccountPrivateAccessResourceName'),'')), parameters('storageAccountPrivateAccessResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'SA_PROXIED')]",
                "resourceLocation": "[if (not (equals (parameters('storageAccountResourceLocation'), '')), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]"
            }
        },
        "sql": {
            "server": {
                "comment": "A collection of variables for passing to the SqlServer ARM Template -- via the proxy of the sqlServerDatabase ARM that depends on it.",
                "id": "[concat(variables('resource').resourceNamePrefix,'.sqlServerDatabaseServer')]",
                "armUrl": "[concat(variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.sqlServer', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.sqlServer', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceLocation": "[if (not (equals (parameters('sqlServerResourceLocation'), '')), parameters('sqlServerResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceName": "[replace(if (not (equals (parameters('sqlServerResourceName'),'')), parameters('sqlServerResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'SQLSERVER')]",
                "sku": "[coalesce(parameters('sqlServerSku'), parameters('webServerFarmSku') )]",
                "administrator": {
                    "login": "[parameters('sqlServerAdministratorLogin')]",
                    "password": "[parameters('sqlServerAdministratorLoginPassword')]"
                }
            },
            "firewallRule": {
                "comment": "A collection of variables for passing to the SqlServerFirewallRule ARM Template.",
                "id": "[concat(variables('resource').resourceNamePrefix,'.sqlServer.fireWallRule')]",
                "armUrl": "[concat(variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.sqlServer.firewallrule', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.sqlServer.firewallrules', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceLocation": "[if (not (equals (parameters('sqlServerFirewallRuleResourceLocation'), '')), parameters('sqlServerFirewallRuleResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceName": "[replace(if (not (equals (parameters('sqlServerFirewallRuleResourceName'),'')), parameters('sqlServerFirewallRuleResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'SQLSERVER_FIREWALL_RULE')]",
                "startIpAddress": "[parameters('sqlServerFirewallRuleStartIpAddress')]",
                "endIpAddress": "[parameters('sqlServerFirewallRuleEndIpAddress')]"
            },
            "auditingPolicies": {
                "comment": "A collection of variables for passing to the SqlServerAuditingPolicies ARM Template.",
                "id": "[concat(variables('resource').resourceNamePrefix,'.sqlServer.auditingPolicies')]",
                "resourceName": "[replace(if (not (equals (parameters('sqlServerAuditingPoliciesResourceName'),'')), parameters('sqlServerAuditingPoliciesResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'SQLSERVER_AUDITING_POLICIES')]",
                "resourceLocation": "[if (not (equals (parameters('sqlServerAuditingPoliciesResourceLocation'), '')), parameters('sqlServerAuditingPoliciesResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]"
            },
            "database": {
                "comment": "A collection of variables for passing to the SqlServerDatabase ARM Template.",
                "id": "[concat(variables('resource').resourceNamePrefix,'.sqlServer.database')]",
                "armUrl": "[concat(variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.sqlServer.database', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.sqlServer.database', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(if (not (equals (parameters('sqlServerDatabaseResourceName'),'')), parameters('sqlServerDatabaseResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'SQLSERVER_DATABASE')]",
                "resourceLocation": "[if (not (equals (parameters('sqlServerDatabaseResourceLocation'), '')), parameters('sqlServerDatabaseResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]"
            }
        },
        "web": {
            "ServerFarm": {
                "comment": "A collection of variables for passing to the webServer  ARM Template.",
                "id": "[concat(variables('resource').resourceNamePrefix,'.appServicePan' )]",
                "armUrl": "[concat(variables('resource').armTemplateRootUrl, '/', variables('resource').resourceNamePrefix,'.webServerFarm', '.json' , parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('resource').armTemplateParameterRootUrl, '/', variables('resource').resourceNamePrefix,'.webServerFarm', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(if (not (equals (parameters('webServerFarmResourceName'),'')), parameters('webServerFarmResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'WEB_SERVER_FARM')]",
                "resourceLocation": "[if (not (equals (parameters('webServerFarmResourceLocation'), '')), parameters('webServerFarmResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "sku": "[parameters('webServerFarmSku')]"
            },
            "site": {
                "resourceName": "[replace(if (not (equals (parameters('webSiteResourceName'),'')), parameters('webSiteResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'WEB_SITE')]",
                "resourceLocation": "[if (not (equals (parameters('webSiteResourceLocation'), '')), parameters('webSiteResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "mode": "MODE:TODO",
                "serverFarmResourceId": "TODO",


                "hostBinding": {
                    "comments": "",
                    "resourceType": "Microsoft.Web/sites/hostNameBindings",
                    "resourceName": "[replace(if (not (equals (parameters('webSiteHostBindingResourceName'),'')), parameters('webSiteHostBindingResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'WEB_SERVER_HOST_BINDING')]",
                    "resourceLocation": "[if (not (equals (parameters('webSiteHostBindingResourceLocation'), '')), parameters('webSiteHostBindingResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                    "hostName": "[parameters('webSiteHostBindingHostName')]",
                    "thumbprint": "[parameters('webSiteHostBindingCertificateThumbprint')]"
                }
            },
            "certificate": {
                "resourceType": "Microsoft.Web/certificates",
                "resourceName": "[replace(if (not (equals (parameters('webCertificateResourceName'),'')), parameters('webCertificateResourceName'), variables('resource').resourceNameTemplate), '{RESOURCETYPE}', 'WEB_CERTIFICATE')]",
                "resourceLocation": "[coalesce(parameters('webCertificateResourceLocation'), variables('resource').resourceLocation, resourceGroup().location)]",
                "pfxBlob": "[coalesce(parameters('webCertificateBase64'),'ERROR:NO PFX BLOB PROVIDED')]",
                "password": "[coalesce(parameters('webCertificatePassword'),'ERROR:NO PFX PASSWORD PROVIDED')]"
            }
        }
    },
    "resources": [
        {
            "comments": "Ensures a Resource Group scoped unique backup Storage Account (for Db)",
            "name": "[variables('storageAccount').diagnostics.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('storageAccount').diagnostics.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').diagnostics.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').diagnostics.resourceLocation]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "uniqueResourceId": {
            "type": "string",
            "value": "[variables('resource').uniqueResourceId]",
            "metadata": {
                "description": "The ResourceGroup scoped unique 13 character Id."
            }
        },
        "resourceName": {
            "type": "string",
            "value": "[variables('resource').resourceNameTemplate]"
        }
    }
}