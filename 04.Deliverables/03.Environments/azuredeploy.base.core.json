{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "sharedResourceGroup": {
            "metadata": {
                "description": "The Resource Group used for Shared Resources (eg: shared KeyVault)"
            },
            "type": "string"
        },
        "resourceMode": {
            "metadata": {
                "description": "Incremental..."
            },
            "allowedValues": [
                "Incremental"
            ],
            "defaultValue": "Incremental",
            "type": "string"
        },
        "resourceLocation": {
            "metadata": {
                "description": "The default location within which to develop the Resources Group and its child Resources, unless specifically defined otherwise (not all resources - such as SqlServers - are available in all resources)."
            },
            "type": "string",
            "allowedValues": [
                "australiaeast",
                "australiasoutheast"
            ],
            "defaultValue": "[resourceGroup().location]"
        },
        "altResourceLocation": {
            "type": "string",
            "defaultValue": "southeastasia",
            "allowedValues": [
                "southeastasia"
            ],
            "metadata": {
                "description": "The alt resource location, used for Databases, and any other resources that can't be location in the primary resourceLocation."
            }
        },
        "resourceNameTemplate": {
            "metadata": {
                "description": "The default name template to use when developing the names of newly created Resources (eg: 'MYORG-MYAPP-{ENVID}-{BRANCHID}-{RESOURCETYPE}')'."
            },
            "type": "string",
            "minLength": 6,
            "maxLength": 24
        },
        "armTemplateRootUrl": {
            "metadata": {
                "description": "The http based base url from which to download referenced ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string",
            "defaultValue": ""
        },
        "armTemplateRootSas": {
            "metadata": {
                "description": "The (optional) Single Access Signature (SAS) required to append to ARM Template Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string",
            "defaultValue": ""
        },
        "armTemplateParameterRootUrl": {
            "metadata": {
                "description": "The http based base url from which to download referenced ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string",
            "defaultValue": ""
        },
        "armTemplateParameterRootSas": {
            "metadata": {
                "description": "The (optional) Single Access Signature (SAS) required to append to ARM Template Paramter Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string",
            "defaultValue": ""
        },
        // -------------------------------------------------------
        // KEY VAULT PARAMETERS
        // -------------------------------------------------------
        "keyVaultVaultResourceName": {
            "type": "string",
            "defaultValue": ""
        },
        "keyVaultVaultResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
              "description": "The location within which to develop the resource."
            }
        },
        "keyVaultVaultResourceSku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "..."
            }
        },
        "keyVaultVaultEnabledForDeployment": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies if the vault is enabled for VM or Service Fabric deployment"
            }
        },
        "keyVaultVaultEnabledForTemplateDeployment": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies if the vault is enabled for ARM template deployment"
            }
        },
        "keyVaultVaultEnabledForDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies if the vault is enabled for volume encryption"
            }
        },
        "keyVaultVaultEnableSoftDelete": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Specifies if the vault is enabled for volume encryption"
            }
        },
        "keyVaultVaultTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // STORAGE ACCOUNT PARAMETERS
        // -------------------------------------------------------
        "storageAccountResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
              "description": "The location within which to develop the resource."
            }
        },
        "storageAccountResourceSku": {
            "type": "string",
            "allowedValues": [
                "Premium_LRS",
                "Standard_GRS",
                "Standard_LRS",
                "Standard_RAGRS",
                "Standard_ZRS"
            ],
            "defaultValue": "Standard_LRS"
        },
        "storageAccountKind": {
            "type": "string",
            "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage"
            ],
            "defaultValue": "Storage"
        },
        "storageAccountTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // STORAGE ACCOUNT PARAMETERS
        // -------------------------------------------------------
        "storageAccountDeploymentResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountDiagnosticsResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountBackupResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountMediaResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "storageAccountMedia2ResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        // -------------------------------------------------------
        // SQL SERVER PARAMETERS
        // -------------------------------------------------------
        "sqlServerResourceLocation": {
            "type": "string",
            "defaultValue": "southeastasia",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
                "description": "The location for the SQL service. This is parameterised because SQL servers cannot be deployed in all regions for subscription types."
            }
        },
        "sqlServerAdministratorLogin": {
            "metadata": {
                "description": "Required. Administrator Login. Required for when creating new SqlServers."
            },
            "type": "securestring",
            "minLength": 6
        },
        "sqlServerAdministratorLoginPassword": {
            "metadata": {
                "description": "Required. Administrator Login's Password. Required when creating new SqlServers."
            },
            "type": "securestring",
            "minLength": 12
        },
        "sqlServerTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // SQL SERVER / FIREWALL RULE PARAMETERS
        // -------------------------------------------------------
        "sqlServerFirewallRuleResourceName": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "AllowAzure",
            "metadata": {
                "description": "Optional. Default name is 'AllowAzure'."
            }
        },
        /* 
        // Not needed, as must be same as SqlServerResourceLocation:
        "sqlServerFirewallRuleResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "australiasoutheast",
                "southeastasia"
            ],
            "metadata": {
              "description": "The location within which to develop the resource. Must equal the parent SqlServer resource location."
            }
        },
        */
        "sqlServerFirewallRuleStartIpAddress": {
            "type": "string",
            "metadata": {
                "description": "Ensure the Database has firewall rules in place. Tip: The range should be permissive (0.0.0.0 - 0.0.0.0), controlling access using AzureAD and integrated security."
            },
            "defaultValue": "0.0.0.0"
        },
        "sqlServerFirewallRuleEndIpAddress": {
            "type": "string",
            "metadata": {
                "description": "Ensure the Database has firewall rules in place. Tip: The range should be permissive (0.0.0.0 - 0.0.0.0), controlling access using AzureAD and integrated security."
            },
            "defaultValue": "0.0.0.0"
        },
        "sqlServerFirewallRuleTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // SQL SERVER / AUDITING POLICIES PARAMETERS
        // -------------------------------------------------------
        "sqlServerAuditingPoliciesResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        /*
        // Not needed, as must be same as SqlServerResourceLocation:
        "sqlServerAuditingPoliciesResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
              "description": "The location within which to develop the resource. Must equal the parent SQL Server Resource's location."
            }
        },
        */
        "sqlServerAuditingPoliciesTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // SQL SERVER DATABASE PARAMETERS
        // -------------------------------------------------------
        "sqlServerDatabaseResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        /*
        // Not needed, as must be same as SqlServerResourceLocation:
        "sqlServerDatabaseResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
              "description": "The location within which to develop the resource. Must equal the parent Sql Server Resource's location."
            }
        },
        */
        "sqlServerDatabaseResourceSku": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "S0",
                "S1",
                "S2"
            ],
            "metadata": {
                "description": "Describes the performance level of the Database. Default is Basic ($8/m, 5 DTU, sufficient for 2GB). S0 is plenty at 25$/m. 10 DTUs, 250Gb. "
            }
        },
        "sqlServerDatabaseZoneRedundant": {
            "type": "bool",
            "defaultValue": false
        },
        "sqlServerDatabaseEdition": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ]
        },
        "sqlServerDatabaseCollation": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
            "allowedValues": [
                "SQL_Latin1_General_CP1_CI_AS"
            ]
        },
        "sqlServerDatabaseMaxSizeBytes": {
            "type": "string",
            "allowedValues": [
                "104857600",
                "524288000",
                "1073741824",
                "2147483648",
                "5368709120",
                "10737418240",
                "21474836480",
                "32212254720",
                "42949672960",
                "53687091200",
                "107374182400",
                "161061273600",
                "214748364800",
                "268435456000",
                "322122547200",
                "429496729600",
                "536870912000"
            ],
            "defaultValue": "2147483648"
        },
        "sqlServerDatabaseTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // DOCUMENDB PARAMETERS
        // -------------------------------------------------------

        // If blank, uses the default resourceNameTemplate parameter.
        // This becomes the subdomain for the 'documents.azure.com' dns namespace.
        "documentDbDatabaseAccountResourceName": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 32,
            "metadata": {
                "description": "The DocumentDb database account name. Needs to be globally unique, lowercase, between 3 and 32 characters long (after token search/replacement)."
            }
        },
        "documentDbDatabaseAccountResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
              "description": "The location within which to develop the resource."
            }
        },
        "documentDbDatabaseAccountResourceSku": {
            "type": "string",
            "defaultValue": "X",
            "allowedValues": [
                "X"
            ],
            "metadata": {
                "description": "Describes the performance level of the Database. Default is Basic ($8/m, 5 DTU, sufficient for 2GB). S0 is plenty at 25$/m. 10 DTUs, 250Gb. "
            }
        },
        "documentDbDatabaseAccountConsistencyPolicyLevel": {
            "type": "string",
            "defaultValue": "Session",
            "allowedValues": [
                "Eventual",
                "Session",
                "BoundedStaleness",
                "Strong",
                "ConsistentPrefix"
            ],
            "metadata": {
                "description": "Describes the performance level of the Database. Default is Basic ($8/m, 5 DTU, sufficient for 2GB). S0 is plenty at 25$/m. 10 DTUs, 250Gb. "
            }
        },
        "documentDbDatabaseAccountConsistencyMaxStalenessPrefix": {
            "type": "int",
            "minValue": 10,
            "maxValue": 1000,
            "defaultValue": 10,
            "metadata": {
                "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "documentDbDatabaseAccountConsistencyMaxIntervalInSeconds": {
            "type": "int",
            "minValue": 5,
            "maxValue": 600,
            "defaultValue": 10,
            "metadata": {
                "description": "When consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "documentDbDatabaseAccountKind": {
            "type": "string",
            "defaultValue": "GlobalDocumentDB",
            "allowedValues": [
                "MongoDB",
                "GlobalDocumentDB",
                "Parse"
            ],
            "metadata": {
                "description": "The kind of Document Db needed. Default is MongoDB"
            }
        },
        "documentDbDatabaseAccountDefaultExperience": {
            "type": "string",
            "defaultValue": "Graph",
            "allowedValues": [
                "Graph"
            ],
            "metadata": {
                "description": "The kind of API to offer (Graph)"
            }
        },
        "documentDbDatabaseAccountOfferType": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard"
            ],
            "metadata": {
                "description": "Only choice is Standard"
            }
        },
        "documentDbDatabaseAccountTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // WEB SERVER FARM PARAMETERS
        // -------------------------------------------------------
        "webServerFarmResourceName": {
            "type": "string",
            "defaultValue": "",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "webServerFarmResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
              "description": "The location within which to develop the resource."
            }
        },
        "webServerFarmResourceSku": {
            "metadata": {
                "description": "App Service server pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            },
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "F1",
                "D1",
                "B1",
                "S1",
                "S2"
            ]
        },
        "webServerFarmNumberOfWorkers": {
            "type": "int",
            "minValue": 1,
            "maxValue": 3,
            "defaultValue": 1
        },
        "webServerFarmTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // WEB CERTIFICATE PARAMETERS
        // -------------------------------------------------------
        "webCertificateResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "webCertificateResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically."
            }
        },
        "webCertificateBase64": {
            "type": "string",
            "metadata": {
                "description": "Optional: Base64 encoded PFX certificate for appService Web Site SSL. Required to match the information within appServiceWebSiteHostName."
            }
        },
        "webCertificatePassword": {
            "type": "securestring",
            "metadata": {
                "description": "Optional: Password for the appService Web Site SSL Pfx Certificate. Only required if `sslCertificateBase64` is provided."
            }
        },
        "webCertificateTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // WEB SITE HOSTBINDING PARAMETERS
        // -------------------------------------------------------
        "webSiteHostBindingResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If it can be set. If left blank, defined automatically according to naming convention."
            }
        },
        "webSiteHostBindingResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
                "description": "The location for the Certificate, if it can be set."
            }
        },
        "webSiteHostBindingHostName": {
            "type": "string",
            "metadata": {
                "description": "."
            }
        },
        "webSiteHostBindingCertificateThumbprint": {
            "type": "string",
            "metadata": {
                "description": "."
            }
        },
        "webSiteHostBindingTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // WEB SITE PARAMETERS
        // -------------------------------------------------------
        "webSiteResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional: Defined automatically according to naming convention but can be overriden here"
            }
        },
        "webSiteResourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "australiaeast",
              "australiasoutheast",
              "southeastasia"
            ],
            "metadata": {
              "description": "The location within which to develop the resource."
            }
        },
        "webSiteResourceSku": {
            "metadata": {
                "description": ""
            },
            "type": "string",
            "defaultValue": "X",
            "allowedValues": [
                "X"
            ]
        },
        "webSiteAlwaysOn": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteDetailedErrorLoggingEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteLogsDirectorySizeLimit": {
            "type": "int",
            "defaultValue": 35,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteHttpLoggingEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteRemoteDebuggingEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteRemoteDebuggingVersion": {
            "type": "string",
            "defaultValue": "VS2012",
            "allowedValues": [
                "VS2012",
                "VS2013"
            ],
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteRequestTracingEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteWebSocketsEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "TODO."
            }
        },
        "webSiteConfigAppSettings": {
            "type": "object",
            "defaultValue": {
                "ExampleKey": "exampleValue"
            },
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target site as AppSettings."
            }
        },
        "webSiteTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            }
        },
        // -------------------------------------------------------
        // MISC
        // -------------------------------------------------------
        "_invalidValidSqlServerResourceLocation": {
            "type": "array",
            "defaultValue": [
                "Australia East",
                "Australia Southeast",
                "australiaeast",
                "australiasoutheast"
            ]
        }
    },
    "variables": {
        "metadata": {
            "comments00": "So...Templates are a set of sequential parameters, variables, resources, output sections for a reason.",
            "conventions": {
                "useVariables": "Using the Variables to shape the incoming Parameters, using Functions.",
                "complexVariables": "Variables are grouped as complex objects. ",
                "complexVariablesChildProperties": "Note that when later referencing child properties of complex variables, the dot is *outside* the top var name: `variables('top').childProperty`",
                "lowerCaseUrls": "Blob storage urls are case-sensitive: so convention is to keep arm template and parameter filenames lower case."
            }
        },
        "tmp": {
            "tmpResourceLocation1": "[if (not (empty (parameters('resourceLocation'))), parameters('resourceLocation'), resourceGroup().location)]",
            "tmpSqlResourceLocation1": "[if (not (empty (parameters('sqlServerResourceLocation'))), parameters('sqlServerResourceLocation'), if (not (empty (parameters('resourceLocation'))), parameters('resourceLocation'), resourceGroup().location))]",
            "resourceNameTemplate": "[replace(replace(replace(parameters('resourceNameTemplate'),'{RESOURCE_TYPE}','{RT}'),'_','-'),'.','-')]"
        },
        "tmp2": {
            "sqlServerResourceName": "[toLower(replace( variables('tmp').resourceNameTemplate, '{RT}', 'sqlserver'))]",
            "sqlServerResourceLocation": "[if (not(contains(parameters('_invalidValidSqlServerResourceLocation'), variables('tmp').tmpSqlResourceLocation1)), variables('tmp').tmpSqlResourceLocation1, parameters('altResourceLocation'))]"
        },
        "resource": {
             // "A collection of variables for use within this template (and any linked child templates)."
            "resourceNamePrefix": "[toLower('azuredeploy.base.core')]",
            "uniqueResourceId": "[uniqueString(resourceGroup().id)]",
            "resourceMode": "[parameters('resourceMode')]",
            "resourceLocation": "[if (not (empty (parameters('resourceLocation'))), parameters('resourceLocation'), resourceGroup().location)]",
            "armTemplateRootUrl": "[parameters('armTemplateRootUrl')]",
            "armTemplateParameterRootUrl": "[parameters('armTemplateParameterRootUrl')]",
            "resourceNameTemplate": "[variables('tmp').resourceNameTemplate]",
            "parametersSuffix": ".parameters"
        },
        "keyVault": {
            "vault": {
                "id": "[concat( variables('resource').resourceNamePrefix,'.keyVault.vault' )]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/keyvault/', variables('resource').resourceNamePrefix,'.keyvault.vault', '.json' , parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/keyvault/', variables('resource').resourceNamePrefix,'.keyvault.vault', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(if (not( empty (parameters('keyVaultVaultResourceName'))), parameters('keyVaultVaultResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'keyvault')]",
                "resourceLocation": "[coalesce(parameters('keyVaultVaultResourceLocation'))]",
                "resourceType": "Microsoft.KeyVault/vaults",
                "resourceSku": "[parameters('keyVaultVaultResourceSku')]",
                "enabledForDeployment": "[parameters('keyVaultVaultEnabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('keyVaultVaultEnabledForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('keyVaultVaultEnabledForDiskEncryption')]",
                "enableSoftDelete": "[parameters('keyVaultVaultEnableSoftDelete')]",
                "tags": "[parameters('keyVaultVaultTags')]"
            }
        },
        "storageAccount": {
            "deployment": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for system diagnostics Backup storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.deployment')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount.deployment', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace( if (not (empty (parameters('storageAccountDiagnosticsResourceName'))), parameters('storageAccountDiagnosticsResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'sa-deploy')]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceSku": "[parameters('storageAccountResourceSku')]",
                "kind": "[parameters('storageAccountKind')]",
                "tags": "[parameters('storageAccountTags')]"
            },
            "diagnostics": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for system diagnostics Backup storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.diagnostics')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount.diagnostics', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace( if (not (empty (parameters('storageAccountDiagnosticsResourceName'))), parameters('storageAccountDiagnosticsResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'sa-diag')]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceSku": "[parameters('storageAccountResourceSku')]",
                "kind": "[parameters('storageAccountKind')]",
                "tags": "[parameters('storageAccountTags')]"
            },
            "backups": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for Backup storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.backups')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount.backups', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace( if (not (empty (parameters('storageAccountBackupResourceName'))), parameters('storageAccountBackupResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'sa-backup')]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceSku": "[parameters('storageAccountResourceSku')]",
                "kind": "[parameters('storageAccountKind')]",
                "tags": "[parameters('storageAccountTags')]"
            },
            "media": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for Media storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.media')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount.media', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace( if (not (empty (parameters('storageAccountMediaResourceName'))), parameters('storageAccountMediaResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'sa-media')]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceSku": "[parameters('storageAccountResourceSku')]",
                "kind": "[parameters('storageAccountKind')]",
                "tags": "[parameters('storageAccountTags')]"
            },
            "media2": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for Media storage.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.storageAccount.media2')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/storageaccount/', variables('resource').resourceNamePrefix,'.storageAccount.media2', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace( if (not (empty (parameters('storageAccountMedia2ResourceName'))), parameters('storageAccountMedia2ResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'sa-media-2')]",
                "resourceLocation": "[if (not (empty (parameters('storageAccountResourceLocation'))), parameters('storageAccountResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceSku": "[parameters('storageAccountResourceSku')]",
                "kind": "[parameters('storageAccountKind')]",
                "tags": "[parameters('storageAccountTags')]"
            }
        },
        "sql": {
            "server": {
                "comment": "A collection of variables for passing to the SqlServer ARM Template -- via the proxy of the sqlServerDatabase ARM that depends on it.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.sql.server')]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/sql/', variables('resource').resourceNamePrefix,'.sql.server', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/sql/', variables('resource').resourceNamePrefix,'.sql.server', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[variables('tmp2').sqlServerResourceName]",
                "resourceLocation": "[variables('tmp2').sqlServerResourceLocation]",
                "administrator": {
                    "login": "[parameters('sqlServerAdministratorLogin')]",
                    "loginPassword": "[parameters('sqlServerAdministratorLoginPassword')]"
                },
                "tags": "[parameters('sqlServerTags')]",
                "firewallRule": {
                    "openToAzure": {
                        "comment": "A collection of variables for passing to the SqlServerFirewallRule ARM Template.",
                        "id": "[concat( variables('resource').resourceNamePrefix,'.sql.server','.firewallRule.openToAzure')]",
                        "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/sql/', variables('resource').resourceNamePrefix,'.sql.server.firewallrule', '.json', parameters('armTemplateRootSas'))]",
                        "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/sql/', variables('resource').resourceNamePrefix,'.sql.server.firewallrule.opentoazure', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                        // the names of child nested resources are prefixed with the name used by the parent object.
                        "resourceName": "[concat(variables('tmp2').sqlServerResourceName, '/rules-opentoazure', if (not (empty (parameters('sqlServerDatabaseResourceName'))), concat('-', parameters('sqlServerDatabaseResourceName')),''))]",
                        "resourceLocation": "[variables('tmp2').sqlServerResourceLocation]",
                        "startIpAddress": "[parameters('sqlServerFirewallRuleStartIpAddress')]",
                        "endIpAddress": "[parameters('sqlServerFirewallRuleEndIpAddress')]",
                        "tags": "[parameters('sqlServerFirewallRuleTags')]"
                    }
                },
                "database": {
                    "comment": "A collection of variables for passing to the SqlServerDatabase ARM Template.",
                    "id": "[concat( variables('resource').resourceNamePrefix,'.sql.server.database')]",
                    "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/sql/', variables('resource').resourceNamePrefix,'.sql.server.database', '.json', parameters('armTemplateRootSas'))]",
                    "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/sql/', variables('resource').resourceNamePrefix,'.sql.server.database', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                    // the names of child nested resources are prefixed with the name used by the parent object.
                    "parentResourceName": "[variables('tmp2').sqlServerResourceName]",
                    "resourceName": "[replace( if (not (empty (parameters('sqlServerDatabaseResourceName'))), parameters('sqlServerDatabaseResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'db')]",
                    "resourceLocation": "[variables('tmp2').sqlServerResourceLocation]",
                    "resourceSku": "[parameters('sqlServerDatabaseResourceSku')]",
                    "collation": "[parameters('sqlServerDatabaseCollation')]",
                    "edition": "[parameters('sqlServerDatabaseEdition')]",
                    "maxSizeBytes": "[parameters('sqlServerDatabaseMaxSizeBytes')]",
                    "zoneRedundant": "[parameters('sqlServerDatabaseZoneRedundant')]",
                    "tags": "[parameters('sqlServerDatabaseTags')]"
                }
            },
            "auditingPolicies": {
                "comment": "A collection of variables for passing to the SqlServerAuditingPolicies ARM Template.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.sqlServer.auditingPolicies')]",
                "resourceName": "[replace( if (not (empty (parameters('sqlServerAuditingPoliciesResourceName'))), parameters('sqlServerAuditingPoliciesResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'sqlserver-auditing-policies')]",
                "resourceLocation": "[variables('tmp2').sqlServerResourceLocation]",
                "tags": "[parameters('sqlServerAuditingPoliciesTags')]"
            }
        },
        "documentDb": {
            "databaseAccount": {
                "id": "[concat( variables('resource').resourceNamePrefix,'.documentDb.databaseAccount' )]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/documentdb/', variables('resource').resourceNamePrefix,'.documentdb.databaseaccount', '.json' , parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/documentdb/', variables('resource').resourceNamePrefix,'.documentdb.databaseaccount', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[take(replace( if (not (empty (parameters('documentDbDatabaseAccountResourceName'))), parameters('documentDbDatabaseAccountResourceName'), variables('resource').resourceNameTemplate ), '{RT}', 'docdb-dbaccnt'), 24)]",
                "resourceType": "Microsoft.DocumentDB/databaseAccounts",
                "resourceLocation": "[parameters('documentDbDatabaseAccountResourceLocation')]",
                "kind": "[parameters('documentDbDatabaseAccountKind')]",
                "offerType": "[parameters('documentDbDatabaseAccountOfferType')]",
                "consistencyPolicy": {
                    "level": "[parameters('documentDbDatabaseAccountConsistencyPolicyLevel')]",
                    "maxStalenessPrefix": "[parameters('documentDbDatabaseAccountConsistencyMaxStalenessPrefix')]",
                    "maxIntervalInSeconds": "[parameters('documentDbDatabaseAccountConsistencyMaxIntervalInSeconds')]"
                },
                "tags": "[parameters('documentDbDatabaseAccountTags')]"
            }
        },
        "web": {
            "serverFarm": {
                "comment": "A collection of variables for passing to the webServer  ARM Template.",
                "id": "[concat( variables('resource').resourceNamePrefix,'.web.appServicePlan' )]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/web/', variables('resource').resourceNamePrefix,'.web.serverfarm', '.json' , parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/web/', variables('resource').resourceNamePrefix,'.web.serverfarm', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[toLower(replace( if (not (empty (parameters('webServerFarmResourceName'))), parameters('webServerFarmResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'web-server-farm'))]",
                "resourceLocation": "[if (not (empty (parameters('webServerFarmResourceLocation'))), parameters('webServerFarmResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceSku": "[parameters('webServerFarmResourceSku')]",
                "numberOfWorkers": "[parameters('webServerFarmNumberOfWorkers')]",
                "tags": "[parameters('webServerFarmTags')]"
            },
            "site": {
                "id": "[concat( variables('resource').resourceNamePrefix,'.web.site' )]",
                "armUrl": "[concat( variables('resource').armTemplateRootUrl, '/web/', variables('resource').resourceNamePrefix,'.web.site', '.json' , parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat( variables('resource').armTemplateParameterRootUrl, '/web/', variables('resource').resourceNamePrefix,'.web.site', variables('resource').parametersSuffix, '.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[toLower(replace( if (not (empty (parameters('webSiteResourceName'))), parameters('webSiteResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'web-site'))]",
                "resourceLocation": "[if (not (empty (parameters('webSiteResourceLocation'))), parameters('webSiteResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                "resourceSku": "[parameters('webSiteResourceSku')]",
                "serverFarmResourceId": "TODO",
                "mode": "MODE:TODO",
                "alwaysOn": "[parameters('webSiteAlwaysOn')]",
                "detailedErrorLoggingEnabled": "[parameters('webSiteDetailedErrorLoggingEnabled')]",
                "logsDirectorySizeLimit": "[parameters('webSiteLogsDirectorySizeLimit')]",
                "httpLoggingEnabled": "[parameters('webSiteHttpLoggingEnabled')]",
                "remoteDebuggingEnabled": "[parameters('webSiteRemoteDebuggingEnabled')]",
                "remoteDebuggingVersion": "[parameters('webSiteRemoteDebuggingVersion')]",
                "requestTracingEnabled": "[parameters('webSiteRequestTracingEnabled')]",
                "webSocketsEnabled": "[parameters('webSiteWebSocketsEnabled')]",
                "config": {
                    "appSettings": "[parameters('webSiteConfigAppSettings')]"
                },
                "tags": "[parameters('webSiteTags')]",
                "hostBinding": {
                    "comments": "",
                    "resourceType": "Microsoft.Web/sites/hostNameBindings",
                    "resourceName": "[concat(replace( if (not (empty (parameters('webSiteHostBindingResourceName'))), parameters('webSiteHostBindingResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'web-site'),'/rule')]",
                    "resourceLocation": "[if (not (empty (parameters('webSiteHostBindingResourceLocation'))), parameters('webSiteHostBindingResourceLocation'), coalesce(variables('resource').resourceLocation, resourceGroup().location) )]",
                    "hostName": "[parameters('webSiteHostBindingHostName')]",
                    "thumbprint": "[parameters('webSiteHostBindingCertificateThumbprint')]",
                    "tags": "[parameters('webSiteHostBindingTags')]"
                }
            },
            "certificate": {
                "resourceType": "Microsoft.Web/certificates",
                "resourceName": "[replace( if (not (empty (parameters('webCertificateResourceName'))), parameters('webCertificateResourceName'), variables('resource').resourceNameTemplate), '{RT}', 'web-certificate')]",
                "resourceLocation": "[coalesce(parameters('webCertificateResourceLocation'), variables('resource').resourceLocation, resourceGroup().location)]",
                "pfxBlob": "[coalesce(parameters('webCertificateBase64'),'ERROR:NO PFX BLOB PROVIDED')]",
                "password": "[coalesce(parameters('webCertificatePassword'),'ERROR:NO PFX PASSWORD PROVIDED')]",
                "tags": "[parameters('webCertificateTags')]"
            }
        }
    },
    // ----------------------------------------------------------------------
    // ----------------------------------------------------------------------
    // Resources
    // ----------------------------------------------------------------------
    // ----------------------------------------------------------------------
    "resources": [
        {
            "comments": "Ensures a Resource Group scoped key vault. WARNING. There can be advantages to keeping KeyVaults outside of a Resource Group",
            "name": "[variables('keyVault').vault.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('keyVault').vault.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "keyVaultVaultResourceName": {
                        "value": "[variables('keyVault').vault.resourceName]"
                    },
                    "keyVaultVaultResourceLocation": {
                        "value": "[variables('keyVault').vault.resourceLocation]"
                    },
                    "keyVaultVaultResourceSku": {
                        "value": "[variables('keyVault').vault.resourceSku]"
                    },
                    "keyVaultVaultEnabledForDeployment": {
                        "value": "[variables('keyVault').vault.enabledForDeployment]"
                    },
                    "keyVaultVaultEnabledForDiskEncryption": {
                        "value": "[variables('keyVault').vault.enabledForDiskEncryption]"
                    },
                    "keyVaultVaultEnableSoftDelete": {
                        "value": "[variables('keyVault').vault.enableSoftDelete]"
                    },
                    "keyVaultVaultTags": {
                        "value": "[variables('keyVault').vault.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique backup Storage Account (for Db)",
            "name": "[variables('storageAccount').deployment.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').deployment.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').deployment.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').deployment.resourceLocation]"
                    },
                    "storageAccountResourceSku": {
                        "value": "[variables('storageAccount').deployment.resourceSku]"
                    },
                    "storageAccountKind": {
                        "value": "[variables('storageAccount').deployment.kind]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').deployment.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique backup Storage Account (for Db)",
            "name": "[variables('storageAccount').diagnostics.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').diagnostics.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').diagnostics.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').diagnostics.resourceLocation]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').diagnostics.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique Database Backups Storage Account",
            "name": "[variables('storageAccount').backups.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').backups.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').backups.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').backups.resourceLocation]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').backups.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique Media Storage Account",
            "name": "[variables('storageAccount').media.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').media.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').media.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').media.resourceLocation]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').media.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique Media (2) Storage Account",
            "name": "[variables('storageAccount').media2.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "[variables('resource').resourceMode]",
                "templateLink": {
                    "uri": "[variables('storageAccount').media2.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountResourceName": {
                        "value": "[variables('storageAccount').media2.resourceName]"
                    },
                    "storageAccountResourceLocation": {
                        "value": "[variables('storageAccount').media2.resourceLocation]"
                    },
                    "storageAccountTags": {
                        "value": "[variables('storageAccount').media2.tags]"
                    }
                }
            }
        },
        {
            "comments": "Ensure a Resource Group scoped SqlServer. Is a dependency for the subsequent deployment of the FirewallRule, and the SqlServerDatabase.",
            "type": "Microsoft.Resources/deployments",
            "name": "[variables('sql').server.id]",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sql').server.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerResourceName": {
                        "value": "[variables('sql').server.resourceName]"
                    },
                    "sqlServerResourceLocation": {
                        "value": "[variables('sql').server.resourceLocation]"
                    },
                    "sqlServerAdministratorLogin": {
                        "value": "[variables('sql').server.administrator.login]"
                    },
                    "sqlServerAdministratorLoginPassword": {
                        "value": "[variables('sql').server.administrator.loginPassword]"
                    },
                    "sqlServerTags": {
                        "value": "[variables('sql').server.tags]"
                    }
                }
            }
        },
        /*

        {
            "dependsOn": [
                "[variables('sql').server.id]"
            ],
            "comments": "Ensures a Resource Group scoped Database Firewall Rule. Depends on `SqlServer` database being ensured as deployed first.",
            "name": "[variables('sql').server.firewallRule.openToAzure.id]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sql').server.firewallRule.openToAzure.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerFirewallRuleResourceName": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.resourceName]"
                    },
                    "sqlServerFirewallRuleResourceLocation": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.resourceLocation]"
                    },
                    "sqlServerFirewallRuleParentResourceId": {
                        "value": "[reference(variables('sql').server.id).outputs.resourceId.value]"
                    },
                    "sqlServerFirewallRuleStartIpAddress": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.startIpAddress]"
                    },
                    "sqlServerFirewallRuleEndIpAddress": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.endIpAddress]"
                    },
                    "sqlServerFirewallRuleTags": {
                        "value": "[variables('sql').server.firewallRule.openToAzure.tags]"
                    }
                }
            }
        },
*/
        // -------------------------------------------------------
        // SQL SERVER
        // -------------------------------------------------------
        {
            "dependsOn": [
                "[variables('sql').server.id]"
                //"[variables('sql').server.firewallRule.openToAzure.id]"
            ],
            "comments": "Ensures a (blank) primary Database is deployed. Note: This should not be necessary (as an app should use DbAsCode/CodeFirst to create it on first run)...but it allows for the setting of collation, and other properties.",
            "name": "[variables('sql').server.database.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sql').server.database.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerDatabaseParentResourceName": {
                        "value": "[variables('sql').server.database.parentResourceName]"
                    },
                    "sqlServerDatabaseResourceName": {
                        "value": "[variables('sql').server.database.resourceName]"
                    },
                    "sqlServerDatabaseResourceLocation": {
                        "value": "[variables('sql').server.database.resourceLocation]"
                    },
                    "sqlServerDatabaseResourceSku": {
                        "value": "[variables('sql').server.database.resourceSku]"
                    },
                    "sqlServerDatabaseCollation": {
                        "value": "[variables('sql').server.database.collation]"
                    },
                    "sqlServerDatabaseEdition": {
                        "value": "[variables('sql').server.database.edition]"
                    },
                    "sqlServerDatabaseZoneRedundant": {
                        "value": "[variables('sql').server.database.zoneRedundant]"
                    },
                    "sqlServerDatabaseMaxSizeBytes": {
                        "value": "[variables('sql').server.database.maxSizeBytes]"
                    },
                    "sqlServerDatabaseTags": {
                        "value": "[variables('sql').server.database.tags]"
                    }
                }
            }
        },

        // -------------------------------------------------------
        // MONGO/COSMO DB
        // -------------------------------------------------------
        {
            "comments": "Ensures a Resource Group scoped unique App Service Plan",
            "name": "[variables('documentDb').databaseAccount.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('documentDb').databaseAccount.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "documentDbDatabaseAccountResourceName": {
                        "value": "[variables('documentDb').databaseAccount.resourceName]"
                    },
                    "documentDbDatabaseAccountResourceLocation": {
                        "value": "[variables('documentDb').databaseAccount.resourceLocation]"
                    },
                    "documentDbDatabaseAccountKind": {
                        "value": "[variables('documentDb').databaseAccount.kind]"
                    },
                    "documentDbDatabaseAccountOfferType": {
                        "value": "[variables('documentDb').databaseAccount.offerType]"
                    },
                    "documentDbDatabaseAccountConsistencyPolicyLevel": {
                        "value": "[variables('documentDb').databaseAccount.consistencyPolicy.level]"
                    },
                    "documentDbDatabaseAccountConsistencyMaxStalenessPrefix": {
                        "value": "[variables('documentDb').databaseAccount.consistencyPolicy.maxStalenessPrefix]"
                    },
                    "documentDbDatabaseAccountConsistencyMaxIntervalInSeconds": {
                        "value": "[variables('documentDb').databaseAccount.consistencyPolicy.maxIntervalInSeconds]"
                    },
                    "documentDbDatabaseAccountTags": {
                        "value": "[variables('documentDb').databaseAccount.tags]"
                    }
                }
            }
        },

        
        // -------------------------------------------------------
        // WEB SERVER FARM
        // -------------------------------------------------------
        {
            "comments": "Ensures a Resource Group scoped unique App Service Plan",
            "name": "[variables('web').serverFarm.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('web').serverFarm.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "webServerFarmResourceName": {
                        "value": "[variables('web').serverFarm.resourceName]"
                    },
                    "webServerFarmResourceLocation": {
                        "value": "[variables('web').serverFarm.resourceLocation]"
                    },
                    "webServerFarmResourceSku": {
                        "value": "[variables('web').serverFarm.resourceSku]"
                    },
                    "webServerFarmNumberOfWorkers": {
                        "value": "[variables('web').serverFarm.numberOfWorkers]"
                    },
                    "webServerFarmTags": {
                        "value": "[variables('web').serverFarm.tags]"
                    }
                }
            }
        },

        /*

        // -------------------------------------------------------
        // WEB SERVER SITE
        // -------------------------------------------------------

        {
            "dependsOn": [
                "[variables('web').serverFarm.id]"
            ],
            "comments": "Ensures a Resource Group scoped web site is deployed",
            "name": "[variables('web').site.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('web').site.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "webSiteParentResourceName": {
                        "value": "[variables('sql').server.database.parentResourceName]"
                    },
                    "webSiteResourceName": {
                        "value": "[variables('web').site.resourceName]"
                    },
                    "webSiteResourceLocation": {
                        "value": "[variables('web').site.resourceLocation]"
                    },
                    "webSiteResourceSku": {
                        "value": "[variables('web').site.resourceSku]"
                    },
                    "webSiteParentResourceId": {
                        "value": "[reference(variables('web').serverFarm.id).outputs.resourceId.value]"
                    },
                    "webSiteAlwaysOn": {
                        "value": "[variables('web').site.alwaysOn]"
                    },
                    "webSiteDetailedErrorLoggingEnabled": {
                        "value": "[variables('web').site.detailedErrorLoggingEnabled]"
                    },
                    "webSiteLogsDirectorySizeLimit": {
                        "value": "[variables('web').site.logsDirectorySizeLimit]"
                    },
                    "webSiteRemoteDebuggingEnabled": {
                        "value": "[variables('web').site.remoteDebuggingEnabled]"
                    },
                    "webSiteRemoteDebuggingVersion": {
                        "value": "[variables('web').site.remoteDebuggingVersion]"
                    },
                    "webSiteRequestTracingEnabled": {
                        "value": "[variables('web').site.requestTracingEnabled]"
                    },
                    "webSiteWebSocketsEnabled": {
                        "value": "[variables('web').site.webSocketsEnabled]"
                    },
                    "webSiteConfigAppSettings": {
                        "value": "[variables('web').site.config.appSettings]"
                    }
                }
            }
        }

*/
    ],
    // -------------------------------------------------------
    // OUTPUTS
    // -------------------------------------------------------
    "outputs": {
        // --------------------------------------------------
        // Common:
        "uniqueResourceId": {
            "type": "string",
            "value": "[variables('resource').uniqueResourceId]",
            "metadata": {
                "description": "The ResourceGroup scoped unique 13 character Id."
            }
        },
        "resourceNameTemplate": {
            "type": "string",
            "value": "[variables('resource').resourceNameTemplate]"
        },
        "keyVaultResourceId": {
            "type": "string",
            "value": "[reference(variables('keyVault').vault.id).outputs.resourceId.value]"
        },
        "keyVaultResourceName": {
            "type": "string",
            "value": "[reference(variables('keyVault').vault.id).outputs.resourceName.value]"
        },
        "keyVaultResourceNameUrl": {
            "type": "string",
            "value": "[reference(variables('keyVault').vault.id).outputs.resourceNameUrl.value]"
        },
        "keyVaultSubscriptionId": {
            "type": "string",
            "value": "[reference(variables('keyVault').vault.id).outputs.subscriptionId.value]"
        },
        // --------------------------------------------------
        // Output from StorageAccount used for Deployment:
        "storageAccountDeploymentResourceId": {
            "type": "string",
            "value": "[reference(variables('storageAccount').deployment.id).outputs.resourceId.value]"
        },
        "storageAccountDeploymentResourceName": {
            "type": "string",
            "value": "[reference(variables('storageAccount').deployment.id).outputs.resourceName.value]"
        },
        "storageAccountDeploymentResourceNameUrl": {
            "type": "string",
            "value": "[reference(variables('storageAccount').deployment.id).outputs.resourceNameUrl.value]"
        },
        "storageAccountDeploymentResourceLocation": {
            "type": "string",
            "value": "[reference(variables('storageAccount').deployment.id).outputs.resourceLocation.value]"
        },
        "storageAccountDeploymentResourceSku": {
            "type": "string",
            "value": "[reference(variables('storageAccount').deployment.id).outputs.resourceSku.value]"
        },
        "storageAccountDeploymentKind": {
            "type": "string",
            "value": "[reference(variables('storageAccount').deployment.id).outputs.resourceSku.value]"
        },
        // --------------------------------------------------
        // Output from StorageAccount used for Diagnostics:
        "storageAccountDeploymentDiagnosticsResourceId": {
            "type": "string",
            "value": "[reference(variables('storageAccount').diagnostics.id).outputs.resourceId.value]"
        },
        "storageAccountDiagnosticsResourceName": {
            "type": "string",
            "value": "[reference(variables('storageAccount').diagnostics.id).outputs.resourceName.value]"
        },
        "storageAccountDiagnosticsResourceNameUrl": {
            "type": "string",
            "value": "[reference(variables('storageAccount').diagnostics.id).outputs.resourceNameUrl.value]"
        },
        "storageAccountDiagnosticsResourceLocation": {
            "type": "string",
            "value": "[reference(variables('storageAccount').diagnostics.id).outputs.resourceLocation.value]"
        },
        "storageAccountDiagnosticsResourceSku": {
            "type": "string",
            "value": "[reference(variables('storageAccount').diagnostics.id).outputs.resourceSku.value]"
        },
        "storageAccountDiagnosticsKind": {
            "type": "string",
            "value": "[reference(variables('storageAccount').diagnostics.id).outputs.resourceSku.value]"
        },
        // --------------------------------------------------
        // Output from StorageAccount used for Backups:
        "storageAccountBackupsResourceId": {
            "type": "string",
            "value": "[reference(variables('storageAccount').backups.id).outputs.resourceId.value]"
        },
        "storageAccountBackupsResourceName": {
            "type": "string",
            "value": "[reference(variables('storageAccount').backups.id).outputs.resourceName.value]"
        },
        "storageAccountBackupsResourceNameUrl": {
            "type": "string",
            "value": "[reference(variables('storageAccount').backups.id).outputs.resourceNameUrl.value]"
        },
        "storageAccountBackupsResourceLocation": {
            "type": "string",
            "value": "[reference(variables('storageAccount').backups.id).outputs.resourceLocation.value]"
        },
        "storageAccountBackupsResourceSku": {
            "type": "string",
            "value": "[reference(variables('storageAccount').backups.id).outputs.resourceSku.value]"
        },
        "storageAccountBackupsKind": {
            "type": "string",
            "value": "[reference(variables('storageAccount').backups.id).outputs.resourceSku.value]"
        },
        // --------------------------------------------------
        // Output from StorageAccount used for Media:
        "storageAccountMediaResourceId": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media.id).outputs.resourceId.value]"
        },
        "storageAccountMediaResourceName": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media.id).outputs.resourceName.value]"
        },
        "storageAccountMediaResourceNameUrl": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media.id).outputs.resourceNameUrl.value]"
        },
        "storageAccountMediaResourceLocation": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media.id).outputs.resourceLocation.value]"
        },
        "storageAccountMediaResourceSku": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media.id).outputs.resourceSku.value]"
        },
        "storageAccountMediaKind": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media.id).outputs.resourceSku.value]"
        },
        // --------------------------------------------------
        // Output from StorageAccount used for Proxied Media:
        "storageAccountMedia2ResourceId": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media2.id).outputs.resourceId.value]"
        },
        "storageAccountMedia2ResourceName": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media2.id).outputs.resourceName.value]"
        },
        "storageAccountMedia2ResourceNameUrl": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media2.id).outputs.resourceNameUrl.value]"
        },
        "storageAccountMedia2ResourceLocation": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media2.id).outputs.resourceLocation.value]"
        },
        "storageAccountMedia2ResourceSku": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media2.id).outputs.resourceSku.value]"
        },
        "storageAccountMedia2Kind": {
            "type": "string",
            "value": "[reference(variables('storageAccount').media2.id).outputs.resourceSku.value]"
        },
        // --------------------------------------------------
        // Output from StorageAccount used for Sql Server:
        "sqlServerResourceId": {
            "type": "string",
            "value": "[reference(variables('sql').server.id).outputs.resourceId.value]"
        },
        "sqlServerResourceName": {
            "type": "string",
            "value": "[reference(variables('sql').server.id).outputs.resourceName.value]"
        },
        "sqlServerResourceLocation": {
            "type": "string",
            "value": "[reference(variables('sql').server.id).outputs.resourceLocation.value]"
        },
        "sqlServerAdministratorLogin": {
            "type": "string",
            "value": "[reference(variables('sql').server.id).outputs.administratorLogin.value]"
        },
        "sqlServerAdministratorPassword": {
            "type": "string",
            "value": "[reference(variables('sql').server.id).outputs.administratorPassword.value]"
        },
        // --------------------------------------------------
        // Output from StorageAccount used for Sql Server Database:
        "sqlServerDatabaseResourceId": {
            "type": "string",
            "value": "[reference(variables('sql').server.database.id).outputs.resourceId.value]"
        },
        "sqlServerDatabaseResourceName": {
            "type": "string",
            "value": "[reference(variables('sql').server.database.id).outputs.resourceName.value]"
        },
        "sqlServerDatabaseResourceLocation": {
            "type": "string",
            "value": "[reference(variables('sql').server.database.id).outputs.resourceLocation.value]"
        },
        "sqlServerDatabaseResourceSku": {
            "type": "string",
            "value": "[reference(variables('sql').server.database.id).outputs.resourceSku.value]"
        },
        "sqlServermaxSizeBytes": {
            "type": "string",
            "value": "[reference(variables('sql').server.database.id).outputs.maxSizeBytes.value]"
        },
        "sqlServerDatabaseEdition": {
            "type": "string",
            "value": "[reference(variables('sql').server.database.id).outputs.edition.value]"
        },
        "sqlServerDatabaseMaxSizeBytes": {
            "type": "string",
            "value": "[reference(variables('sql').server.database.id).outputs.maxSizeBytes.value]"
        },
        /*
        // Never understood why I could not get this to work:

        "sqlServerDatabaseZoneRedundant": {
            "type": "string",
            "value": "[reference(variables('sql').server.database.id).outputs.zoneRedundant.value]"
        }
        */


        /*
        // --------------------------------------------------
        // Output from DocumentDb
        "documentDbDatabaseAccountResourceId": {
            "type": "string",
            "value": "[reference(variables('documentDb').databaseAccount.id).outputs.resourceId.value]"
        },
        "documentDbDatabaseAccountResourceName": {
            "type": "string",
            "value": "[reference(variables('documentDb').databaseAccount.id).outputs.resourceName.value]"
        },
        "documentDbDatabaseAccountResourceLocation": {
            "type": "string",
            "value": "[reference(variables('documentDb').databaseAccount.id).outputs.resourceLocation.value]"
        },
        "documentDbDatabaseAccountKind": {
            "type": "string",
            "value": "[reference(variables('documentDb').databaseAccount.id).outputs.kind.value]"
        },
        "documentDbDatabaseAccountExperience": {
            "type": "string",
            "value": "[reference(variables('documentDb').databaseAccount.id).outputs.experience.value]"
        },
        "documentDbDatabaseAccountOfferType": {
            "type": "string",
            "value": "[reference(variables('documentDb').databaseAccount.id).outputs.offerType.value]"
        }
        */
    }
}