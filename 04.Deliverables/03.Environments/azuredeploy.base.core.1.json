"miscUrl": "[concat('https', '://', parameters('dbAuditStorageAccountName'), '.table.core.windows.net', '/')]"

"storageTableEndpoint": "[concat('https', '://', parameters('dbAuditStorageAccountName'), '.table.core.windows.net', '/')]",
"fullAuditLogsTableName": "[concat('sqlServerDatabaseAuditLogs',variables('sqlServerResourceName'))]",
"auditLogsTableName": "[variables('sqlServerResourceName')]"

{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceLocation": {
            "metadata": {
                "description": "The default location within which to develop the Resources Group and its child Resources, unless specifically defined otherwise (not all resources - such as SqlServers - are available in all resources)."
            },
            "type": "string",
            "minLength": 1,
            "allowedValues": [
                "Australia East",
                "Australia Southeast"
            ],
            "defaultValue": "[resourceGroup().location]"
        },
        "resourceNameTemplate": {
            "metadata": {
                "description": "The default name template to use when developing the names of newly created Resources (eg: 'MYORG-MYAPP-{ENVID}-{BRANCHID}-{RESOURCETYPE}')'."
            },
            "type": "string",
            "minLength": 6
        },
        "armTemplateRootUrl": {
            "metadata": {
                "description": "The http based base url from which to download referenced ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string",
            "minLength": 0
        },
        "armTemplateRootSas": {
            "metadata": {
                "description": "The (optional) Single Access Signature (SAS) required to append to ARM Template Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string",
            "minLength": 0
        },
        "armTemplateParameterRootUri": {
            "metadata": {
                "description": "The http based base url from which to download referenced ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string",
            "minLength": 0
        },
        "armTemplateParameterRootSas": {
            "metadata": {
                "description": "The (optional) Single Access Signature (SAS) required to append to ARM Template Paramter Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string",
            "minLength": 0
        },
        "sqlServerLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "East US",
                "South Central US",
                "Southeast Asia",
                "West Central US",
                "West Europe",
                "West US 2"
            ],
            "metadata": {
                "description": "The location for the SQL service. This is parameterised because SQL servers cannot be deployed in all regions for subscription types."
            }
        },
        "sqlServerSku": {
            "metadata": {
                "description": "App Service server pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            },
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "Basic",
                "S0",
                "S1",
                "S2"
            ]
        },
        "defaultSqlDatabaseServerResourceName": {
            "metadata": {
                "description": "If provided, look for specified database server, and create the database there. It's cheaper to reuse a common db (but it should be outside this Resource group)."
            },
            "type": "string",
            "minLength": 0,
            "defaultValue": ""
        },
        "sqlServerResourceName": {
            "type": "string",
            "defaultValue": "<INTERNALLYDEFINED>",
            "metadata": {
                "description": "Optional: Defined automatically according to naming convention but can be overriden here"
            }
        },
        "sqlServerAdministratorLogin": {
            "metadata": {
                "description": "Required. Administrator Login. Required for when creating new SqlServers."
            },
            "type": "securestring",
            "minLength": 6
        },
        "sqlServerAdministratorLoginPassword": {
            "metadata": {
                "description": "Required. Administrator Login's Password. Required when creating new SqlServers."
            },
            "type": "securestring",
            "minLength": 12
        },
        "sqlServerFirewallRuleResourceName": {
            "type": "string",
            "minLength": 1
        },
        "sqlServerFirewallRuleResourceLocation": {
            "type": "string"
        },
        "sqlServerFirewallRuleStartIpAddress": {
            "type": "string",
            "metadata": {
                "description": "Ensure the Database has firewall rules in place. Tip: The range should be permissive (0.0.0.0 - 0.0.0.0), controlling access using AzureAD and integrated security."
            }
        },
        "sqlServerFirewallRuleEndIpAddress": {
            "type": "string",
            "metadata": {
                "description": "Ensure the Database has firewall rules in place. Tip: The range should be permissive (0.0.0.0 - 0.0.0.0), controlling access using AzureAD and integrated security."
            }
        },
        "webServerFarmSku": {
            "metadata": {
                "description": "App Service server pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            },
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "F1",
                "D1",
                "B1",
                "S1",
                "S2"
            ]
        },
        "appServiceResourceName": {
            "type": "string",
            "defaultValue": "<INTERNALLYDEFINED>",
            "metadata": {
                "description": "Optional: Defined automatically according to naming convention but can be overriden here"
            }
        },
        "appServiceWebSiteHostName": {
            "type": "string",
            "defaultValue": "<NONEDEFINED>",
            "metadata": {
                "description": "Optional: If an custom (ie, alternate) DNS entry is to be applied to the app service (e.g: myapp.myorg.tld)."
            }
        },
        "sslCertificateBase64": {
            "type": "string",
            "defaultValue": "<NONEDEFINED>",
            "metadata": {
                "description": "Optional: Base64 encoded PFX certificate for appService Web Site SSL. Required to match the information within appServiceWebSiteHostName."
            }
        },
        "sslCertificatePassword": {
            "type": "securestring",
            "defaultValue": "<NONEDEFINED>",
            "metadata": {
                "description": "Optional: Password for the appService Web Site SSL Pfx Certificate. Only required if `sslCertificateBase64` is provided."
            }
        }
    },
    "variables": {
        "metadata": {
            "comments00": "So...Templates are a set of sequential parameters, variables, resources, output sections for a reason.",
            "comments01": "Using the Variables to shape the incoming Parameters, using Functions.",
            "comments02": "Variables are grouped as complex objects. Note that when later referencing",
            "comments03": "child properties, the dot is *outside* the top var name: `variables('top').childProperty`"
        },
        "resourceNamePrefix": "azuredeploy.base.core",
        "uniqueResourceId": "[uniqueString(resourceGroup().id)]",
        "currentTemplateUrl": "[deployment().properties.templateLink.uri]",
        "currentTemplateUriRoot": "[uri(deployment().properties.templateLink.uri, '')]",
        "armTemplateRootUrl": "[coalesce(parameters('armTemplateRootUrl'), parameters('currentTemplateUriRoot'))]",
        "resourceLocation": "[parameters('resourceLocation')]",
        "resourceNameTemplate": "[parameters('resourceNameTemplate')]",
        "resource": {
            "comment": "A collection of variables for use within this template (and any linked child templates).",
            "currentTemplateUrl": "[deployment().properties.templateLink.uri]",
            "currentTemplateUriRoot": "[uri(deployment().properties.templateLink.uri, '')]",
            "uniqueId": "[uniqueString(resourceGroup().id)]",
            "resourceLocation": "[parameters('resourceLocation')]",
            "armTemplateRootUrl": "[coalesce(parameters('armTemplateRootUrl'), parameters('currentTemplateUriRoot')]",
            "resourceNameTemplate": "[parameters('resourceNameTemplate')]"
        },
        "storageAccount": {
            "databaseBackups": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for database Backup storage.",
                "id": "[concat(variables('resourceNamePrefix'),'.storageAccount.databaseBackups')]",
                "armUrl": "[concat(variables('armTemplateRootUrl'), '/', variables('resourceNamePrefix'),'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('armTemplateParameterRootUri'), '/', variables('resourceNamePrefix'),'.storageAccount.database.backups', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(parameters('resourceNameTemplate'), '{RESOURCETYPE}', 'SA')]",
                "resourceLocation": "[parameters('resourceLocation')]"
            },
            "media": {
                "comment": "A collection of variables for passing to the storageAccount ARM Template for database Private (proxied) storage.",
                "id": "[concat(variables('resourceNamePrefix'),'.storageAccount.database.media')]",
                "armUrl": "[concat(variables('armTemplateRootUrl'), '/', variables('resourceNamePrefix'),'.storageAccount', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('armTemplateParameterRootUri'), '/', variables('resourceNamePrefix'),'.storageAccount.private', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(parameters('resourceNameTemplate'), '{RESOURCETYPE}', 'SA_MEDIA')]",
                "resourceLocation": "[parameters('resourceLocation')]"
            }
        },
        "sql": {
            "server": {
                "comment": "A collection of variables for passing to the SqlServer ARM Template -- via the proxy of the sqlServerDatabase ARM that depends on it.",
                "id": "[concat(variables('resourceNamePrefix'),'.sqlServerDatabaseServer')]",
                "armUrl": "[concat(variables('armTemplateRootUrl'), '/', variables('resourceNamePrefix'),'.sqlServer', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('armTemplateParameterRootUri'), '/', variables('resourceNamePrefix'),'.sqlServer', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceLocation": "[parameters('resourceLocation')]",
                "resourceName": "[replace(parameters('resourceNameTemplate'), '{RESOURCETYPE}', 'SS')]",
                "sku": "[coalesce(parameters('sqlServerSku'), parameters('webServerFarmSku') )]",
                "administrator": {
                    "login": "[parameters('sqlServerAdministratorLogin')]",
                    "password": "[parameters('sqlServerAdministratorLoginPassword')]"
                }
            }
            "firewallRule": {
                "comment": "A collection of variables for passing to the SqlServerFirewallRule ARM Template.",
                "id": "[concat(variables('resourceNamePrefix'),'.sqlServer.fireWallRule')]",
                "armUrl": "[concat(variables('armTemplateRootUrl'), '/', variables('resourceNamePrefix'),'.sqlServer.firewallrule', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('armTemplateParameterRootUri'), '/', variables('resourceNamePrefix'),'.sqlServer.firewallrules', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceLocation": "[parameters('resourceLocation')]",
                "resourceName": "[replace(parameters('resourceNameTemplate'), '{RESOURCETYPE}', 'SS_FWR')]",
                "startIpAddress": "[parameters('sqlServerFirewallRuleStartIpAddress')]",
                "endIpAddress": "[parameters('sqlServerFirewallRuleEndIpAddress')]"
            },
            "auditingPolicies": {
                "comment": "A collection of variables for passing to the SqlServerAuditingPolicies ARM Template.",
                "id": "[concat(variables('resourceNamePrefix'),'.sqlServer.auditingPolicies')]"
            },
            "database": {
                "comment": "A collection of variables for passing to the SqlServerDatabase ARM Template.",
                "id": "[concat(variables('resourceNamePrefix'),'.sqlServer.database')]",
                "armUrl": "[concat(variables('armTemplateRootUrl'), '/', variables('resourceNamePrefix'),'.sqlServer.database', '.json', parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('armTemplateParameterRootUri'), '/', variables('resourceNamePrefix'),'.sqlServer.database', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceName": "[replace(parameters('resourceNameTemplate'), '{RESOURCETYPE}', 'SSDB')]"
            }
        },
        "web": {
            "ServerFarm": {
                "comment": "A collection of variables for passing to the webServer  ARM Template.",
                "id": "[concat(variables('resourceNamePrefix'),'.appServicePan' )]",
                "armUrl": "[concat(variables('armTemplateRootUrl'), '/', variables('resourceNamePrefix'),'.webServerFarm', '.json' , parameters('armTemplateRootSas'))]",
                "armParametersUrl": "[concat(variables('armTemplateParameterRootUri'), '/', variables('resourceNamePrefix'),'.webServerFarm', '.parameters.json', parameters('armTemplateParameterRootSas'))]",
                "resourceLocation": "[parameters('resourceLocation')]",
                "resourceName": "[replace(parameters('resourceNameTemplate'), '{RESOURCETYPE}', 'WSF')]",
                "sku": "[parameters('webServerFarmSku')]"
            },
            "site": {
                "hostBinding": {
                    "comments": "",
                    "resourceName": "[parameters('webSiteHostBindingResourceName')]",
                    "resourceType": "Microsoft.Web/sites/hostNameBindings",
                    "resourceLocation": "[parameters('webServerFarmResourceLocation')]",
                    "hostName": "[parameters('webSiteHostBindingHostName')]",
                    "thumbprint": "[parameters('webSiteHostBindingCertificateThumbprint')]"
                }
            },
            "certificate": {
                "resourceName": "[parameters('webCertificateResourceName')]",
                "resourceType": "Microsoft.Web/certificates",
                "resourceLocation": "parameters('webCertificateResourceLocation')]",
                "pfxBlob": "[parameters('webCertificateBase64')]",
                "password": "[parameters('webCertificatePassword')]"
            }
        }
    },
    "resources": [
        {
            "comments": "Ensures a Resource Group scoped unique Database Backups Storage Account",
            "name": "[variables('storageAccount').databaseBackups.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('storageAccount').databaseBackups.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceName": {
                        "value": "[variables('storageAccount').databaseBackups.resourceName]"
                    },
                    "resourceLocation": {
                        "value": "[variables('storageAccount').databaseBackups.resourceLocation]"
                    }
                }
            }
        },
        {
            "comments": "Ensures a Resource Group scoped unique Media Storage Account",
            "name": "[variables('storageAccount').media.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('storageAccount').media.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceName": {
                        "value": "[variables('storageAccount').media.resourceName]"
                    },
                    "resourceLocation": {
                        "value": "[variables('storageAccount').media.resourceLocation]"
                    }
                }
            }
        },
        {
            "comments": "Ensure Resource Group SqlServer. Is a dependency for the subsequent deployment of the FirewallRule, and the SqlServerDatabase.",
            "type": "Microsoft.Resources/deployments",
            "name": "[variables('sql').server.id]",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sql').server.armPath]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerResourceName": {
                        "value": "[variables('sql').server.resourceName]"
                    },
                    "sqlServerLocation": {
                        "value": "[variables('sql').server.resourceLocation]"
                    },
                    "sqlServerSku": {
                        "value": "[variables('sql').server.sku]"
                    },
                    "sqlServerAdministratorLogin": {
                        "value": "[variables('sql').server.administratorLogin]"
                    },
                    "sqlServerAdministratorLoginPassword": {
                        "value": "[variables('sql').server.administratorLoginPassword]"
                    }
                }
            }
        },
        {
            "dependsOn": [
                "[variables('sql').server.id]"
            ],
            "comments": "Ensures a Resource Group scoped Database Firewall Rule. Depends on `SqlServer` database being ensured as deployed first.",
            "name": "[variables('sql').server.firewallRule.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sql').server.firewallRule.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerFirewallRuleResourceName": {
                        "value": "[variables('sql').server.firewallRule.resourceName]"
                    },
                    "sqlServerFirewallRuleResourceLocation": {
                        "value": "[variables('sql').server.firewallRule.resourceLocation]"
                    },
                    "sqlServerFirewallRuleStartIpAddress": {
                        "value": "[variables('sql').server.firewallRule.startIPAddress]"
                    },
                    "sqlServerFirewallRuleEndIpAddress": {
                        "value": "[variables('sql').server.firewallRule.endIPAddress]"
                    }
                },
                "parametersLink": "[variables('sql').server.firewallRule.armParametersUri]"
            },
            "tags": {}
        },
        {
            "dependsOn": [
                "[variables('sql').server.id]",
                "[variables('storageAccount').databaseBackups.id]"
            ],
            "comments": "Ensures the Database is backing up to a dedicated storage Account.",
            "name": "[variables('sql').server.auditingPolicies.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sql').server.auditingPolicies.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {}
            }
        },
        {
            "dependsOn": [
                "[variables('sql').server.firewallRule.id]",
                "[variables('sql').server.id]"
            ],
            "comments": "Ensures a (blank) primary Database is deployed. Note: This should not be necessary (as an app should use DbAsCode/CodeFirst to create it on first run)...but it allows for the setting of collation, and other properties.",
            "name": "[variables('sqlServerDatabase').id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "parameters": {
                    "sqlServerDatabaseResourceName": {
                        "value": "[variables('sqlServerDatabase').resourceName]"
                    },
                    "sqlServerDatabaseLocation": {
                        "value": "[variables('sqlServerDatabase').resourceLocation]"
                    },
                    "sqlServerDatabaseCollation": {
                        "value": "[variables('sqlServerDatabase').collation]"
                    },
                    "sqlServerDatabaseEdition": {
                        "value": "[variables('sqlServerDatabase').edition]"
                    },
                    "sqlServerDatabaseZoneRedundant": {
                        "value": "[variables('sqlServerDatabase').zoneRedundant]"
                    },
                    "sqlServerDatabaseMaxSizeBytes": {
                        "value": "[variables('sqlServerDatabase').maxSizeBytes]"
                    },
                    "requestedServiceObjectiveId": {
                        "value": "[variables('sqlServerDatabase').requestedServiceObjectiveId]"
                    }
                }
            },
            "tags": {}
            },
        {
            "comments": "Ensures a Resource Group scoped unique App Service Plan",
            "name": "[variables('web').serverFarm.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('web').serverFarm.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "webServiceFarmResourceName": {
                        "value": "[variables('web').serverFarm.resourceName]"
                    },
                    "webServiceFarmResourceLocation": {
                        "value": "[variables('web').serverFarm.resourceLocation]"
                    },
                    "webServiceFarmSku": {
                        "value": "[variables('web').serverFarm.sku]"
                    }
                }
            }
        },
        {
            "dependsOn": [
                "[variables('web').site.id]"
            ],
            "comments": "Ensures a Resource Group scoped web certificate is deployed",
            "name": "[variables('web').certificate.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('web').certificate.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "webCertificateResourceName": {
                        "value": "[variables('web').certificate.resourceName]"
                    },
                    "webCertificateResourceLocation": {
                        "value": "[variables('web').certificate.resourceLocation]"
                    },
                    "webCertificateBase64": {
                        "value": "[variables('web').certificate.base64]"
                    },
                    "webCertificatePassword": {
                        "value": "[variables('web').certificate.password]"
                    }
                }
            }
        },
        {
            "dependsOn": [
                "[variables('web').site.id]"
            ],
            "comments": "Ensures a Resource Group scoped web hostBinding is deployed",
            "name": "[variables('web').site.hostBinding.id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('web').site.hostBinding.armUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "webSiteHostBindingArmUrl": {
                        "value": "[variables('web').site.hosting.binding.armUrl]"
                    },
                    "webSiteHostBindingResourceName": {
                        "value": "[variables('web').site.hosting.binding.resourceName]"
                    },
                    "webSiteHostBindingResourceLocation": {
                        "value": "[variables('web').site.hosting.binding.resourceLocation]"
                    },
                    "webSiteHostBindingHostName": {
                        "value": "[variables('web').site.hosting.binding.hostName]"
                    },
                    "webSiteHostBindingCertificateThumbprint": {
                        "value": "[variables('web').site.hosting.binding.certificateThumbprint]"
                    }
                }
            }
        },
        {
            "dependsOn": [
                "[variables('web').serverFarm.id]"
            ],
            "comments": "Ensures a Resource Group scoped web site is deployed",
            "name": "[variables('web.site').id]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "parameters": {}
            }
        },
    ],
    "outputs": {
        "uniqueResourceId": {
            "type": "string",
            "value": "[variables('uniqueResourceId')]",
            "metadata": {
                "description": "The ResourceGroup scoped unique 13 character Id."
            }
        },
        "resourceName": {
            "type": "string",
            "value": "[parameters('resourceNameTemplate')]"
        }
    }
}