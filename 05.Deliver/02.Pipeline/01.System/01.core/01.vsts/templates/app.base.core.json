{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "linkedAssembliesArmTemplateRootUrl": {
            "metadata": {
                "description": "Required. The http based base url from which to download referenced linked Assembly ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string"
        },
        "linkedAssembliesArmTemplateRootSas": {
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The Single Access Signature (SAS) required to append to linked Assembly ARM Template Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string"
        },
        "linkedResourcesArmTemplateRootUrl": {
            "metadata": {
                "description": "Required. The http based base url from which to download referenced linked Resource ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string"
        },
        "linkedResourcesArmTemplateRootSas": {
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The Single Access Signature (SAS) required to append to linked Resource ARM Template Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string"
        },
        "resourceAltLocation": {
            "defaultValue": "southeastasia",
            "allowedValues": [
                "southeastasia"
            ],
            "metadata": {
                "description": "Optional. The alt resource location, used for Databases, and any other resources that can't be location in the primary resourceLocation."
            },
            "type": "string"
        },
        "resourceNameTemplate": {
            "metadata": {
                "description": "Required. The default name template to use when developing the names of newly created Resources (eg: 'MYORG-MYAPP-{ENVID}-{BRANCHID}-{RESOURCETYPE}')'."
            },
            "minLength": 6,
            "maxLength": 32,
            "type": "string"
        },
        "commonResourceTags": {
            "defaultValue": {},
            "metadata": {
                "description": "Optional. An Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target resource as Tags."
            },
            "type": "object"
        },
        "securityApproach": {
            "allowedValues": [
                "insecure",
                "sp",
                "msi"
            ],
            "defaultValue": "msi",
            "metadata": {
                "description": "Optional. An flag specifying if the vault is enabled for VM or Service Fabric deployment"
            },
            "type": "string"
        },
        "cacheRedisProvision": {
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Cache has a minimum cost of about 20$ per month. But, more importantly, it takes ages to provision."
            },
            "type": "bool"
        },
        "sqlServerAdministratorLogin": {
            "minLength": 6,
            "metadata": {
                "description": "Required. Provide the Sql Server Administrator's name, which an infrastructure support specialist will have defined and set within a key vault outside of the projects resource group (and probably in a different subscription) so use the reference approach to get it out, and place it here. Required when creating a new Database Server. Note that security is not perfect: a developer can develop arm templates whose output records the values it extracts from a keyvault. Provide the Sql Server Administrator's Login. Required when creating a new Database Server. This is unfortunate as it requires risk-mitigation processes around deployment to correctly secure the secret and not leave it in the hands of stakeholders that don't absolutely need to know it. Developers don't."
            },
            "type": "string"
        },
        "sqlServerAdministratorLoginPassword": {
            "metadata": {
                "description": "Required. Provide the Sql Server Administrator's Password, which an infrastructure support specialist will have defined and set within a key vault outside of the projects resource group (and probably in a different subscription) so use the reference approach to get it out, and place it here.  Required when creating a new Database Server.  Note that security is not perfect: a developer can develop arm templates whose output records the values it extracts from a keyvault."
            },
            "type": "securestring"
        },
        "sqlServerDeveloperStatingSecretsAreNotRecordedInCode": {
            "minLength": 4,
            "metadata": {
                "description": "Required. The Name of the ARM developer (ie *you*!) who is certifying they understand the security risks of recording passwords in a parameter file, or any other code and are not doing it here (and the code base's commit history will back them up). Instead, the value will be retrieved from an eternal keyvault to which the build service has been granted access. "
            },
            "type": "string"
        },
        "webServerFarmResourceSku": {
            "allowedValues": [
                "F1",
                "D1",
                "B1",
                "S1",
                "S2"
            ],
            "defaultValue": "F1",
            "metadata": {
                "description": "Optional. App Service server pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/ Default is F1 to keep prices down until you know you need Site Binding. Or AlwaysOn. Or other features that need a mininum of S1."
            },
            "type": "string"
        },
        "webCertificatePfxBase64": {
            "defaultValue": "",
            "metadata": {
                "description": "Optional.   Base64 encoded PFX certificate for appService Web Site SSL. Required to match the information within appServiceWebSiteHostName."
            },
            "type": "string"
        },
        "webCertificatePfxPassword": {
            "metadata": {
                "description": "Optional.   Password for the appService Web Site SSL Pfx Certificate. Only required if `sslCertificateBase64` is provided."
            },
            "type": "securestring"
        },
        "webCertificateDeveloperStatingSecretsAreNotRecordedInCode": {
            "minLength": 4,
            "metadata": {
                "description": "The Name of the ARM developer (ie *you*!) who is certifying they understand the security risks of recording passwords in a parameter file, or any other code and are not doing it here (and the code base's commit history will back them up). Instead, the value will be retrieved from an eternal keyvault to which the build service has been granted access. "
            },
            "type": "string"
        },
        "webSiteResourceName": {
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The name for the Resource. Default it ''. If not provided, falls back to an 'resourceNameTemplate'-based, automatically generated resource name, using 'web-site' for the {RT} token. See also 'webSiteHostNameBindingHostName'."
            },
            "type": "string"
        },
        "webSiteAlwaysOn": {
            "defaultValue": false,
            "metadata": {
                "description": "Optional. The default is false as true requires a minimal SKU of S1."
            },
            "type": "bool"
        },
        "webSiteConfigAppSettings": {
            "defaultValue": {},
            "metadata": {
                "description": "Optional. A Complex Object (ie, JSON) containing a series of stringKey/stringValues that are added to the target site as AppSettings."
            },
            "type": "object"
        },
        "webSiteConfigAppSettingsDeveloperStatingSecretsAreNotRecordedInCode": {
            "minLength": 4,
            "metadata": {
                "description": "The Name of the ARM developer (ie *you*!) who is certifying they understand the security risks of recording passwords in a parameter file, or any other code and are not doing it here (and the code base's commit history will back them up)."
            },
            "type": "string"
        },
        "webSiteConfigConnectionStrings": {
            "defaultValue": {},
            "metadata": {
                "description": "Optional. A Complex Object (not an array) of a set of {'name' { 'value' and 'type'}}, that are added to the site's ConnectionStrings. Type is Case Senstive. And probably should be SQLAzure in most cases."
            },
            "type": "object"
        },
        "webSiteConfigConnectionStringsDeveloperStatingSecretsAreNotRecordedInCode": {
            "minLength": 4,
            "metadata": {
                "description": "The Name of the ARM developer (ie *you*!) who is certifying they understand the security risks of recording passwords in a parameter file, or any other code and are not doing it here (and the code base's commit history will back them up). Instead, use the Azure equivalent to IntegratedSecurity (ie, MSI)."
            },
            "type": "string"
        },
        "webSiteHostNameBindingHostName": {
            "metadata": {
                "description": "Optional. The public DNS name of the website. Default is ''. Will require a WebServerFarm SKU of S1 of higher to be set."
            },
            "type": "string"
        },
        "webSiteHostNameBindingHostNameAlt": {
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If 'webSiteHostNameBindingHostName' is used for 'www.mydomain.tld', you want to be able to also register 'mydomain.tld' as well."
            },
            "type": "string"
        },
        "oauthEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Hook up to an OAuth Authority (you will need to provide the OAuth AuthorityUri, ClientId ClientKey."
            }
        },
        "oauthClientId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If your system needs to authenticate users, it should be via OIDC. Which is an extension of OAuth. If authenticating systems, it should be via OAuth.  Both require that you have the ClientId and ClientSecret that were developed by the remote IdP when you registered your app with it."
            }
        },
        "oauthClientSecret": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If your system needs to authenticate users, it should be via OIDC. Which is an extension of OAuth. If authenticating systems, it should be via OAuth. Both require that you have the ClientId and ClientSecret that were developed by the remote IdP when you registered your app with it."
            }
        },
        "oauthAuthorityUri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Where the system sends authentication requests off to."
            }
        },
        "oauthClientRedirectUri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If your system needs to authenticate users, using OIDC, you have to redirect Users back from the remote IDP to this system's Homepage. This is the 'redirect_uri' value of an OAuth request. '/' won't work (that would be the IdP's home page). If not provided, will be automatically generated using 'https' and your host binding name you provided."
            }
        },
        "oauthClientPostLogoutRedirectUri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. If your system needs to authenticate users, using OIDC, after a user is signed off (destroying their security token), you want to redirect them to the home page or other. The default is '/'."
            }
        },
        "oidcPoliciesSignUpSignInPolicyId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The name of the B2C's Policy/Flow to use for SignUp/SignIn."
            }
        },
        "oidcPoliciesUserProfilePolicyId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The name of the B2C's Policy/Flow to use for retrieving the User Profile."
            }
        },
        "oidcPoliciesEditProfilePolicyId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The name of the B2C's Policy/Flow to use for editing the User Profile."
            }
        },
        "oidcPoliciesResetPasswordPolicyId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The name of the B2C's Policy/Flow to use for reseting the user's Password."
            }
        },
        "keyVaultVaultSecretSecrets": {
            "type": "array",
            "defaultValue": [
                {
                    "name": "system-integration-scanii-malwaredetection-oauth-clientid",
                    "type": "text/plain",
                    "value": "todo:how to get this from vault?"
                },
                {
                    "name": "system-integration-scanii-malwaredetection-oauth-clientsecret",
                    "type": "text/plain",
                    "value": "todo:how to get this from vault?"
                },
                {
                    "name": "system-integration-oidc-authorityuri",
                    "type": "text/plain",
                    "value": "todo"
                },
                {
                    "name": "system-integration-oidc-clientid",
                    "type": "text/plain",
                    "value": "todo:how to get this from vault?"
                },
                {
                    "name": "system-integration-oidc-clientsecret",
                    "type": "text/plain",
                    "value": "todo:how to get this from vault?"
                },
                {
                    "name": "system-integration-oidc-redirecturi",
                    "type": "text/plain",
                    "value": "todo"
                }
            ],
            "metadata": {
                "description": "Optional. An array of Complex of name, type, value. With no comments allowed within the array (due to bug in VSTS)."
            }
        }
    },
    "variables": {
        "securityApproach": "[parameters('securityApproach')]",
        "resources": {
            "resourceNamePrefix": "[toLower('azure.arm.base.')]",
            "resourceNameTemplate": "[parameters('resourceNameTemplate')]",
            "commonResourceTags": "[parameters('commonResourceTags')]"
        },
        "locations": {
            "resourceLocation": "[resourceGroup().location]",
            "resourceAltLocation": "[parameters('resourceAltLocation')]"
        },
        "assembly": {
            "armTemplateId": "[concat(variables('resources').resourceNamePrefix, 'assembly.01')]",
            "linkedResourcesArmTemplateRootUrl": "[parameters('linkedResourcesArmTemplateRootUrl')]",
            "linkedResourcesArmTemplateRootSas": "[parameters('linkedResourcesArmTemplateRootSas')]",
            "linkedAssembly01TemplateUrl": "[concat( parameters('linkedAssembliesArmTemplateRootUrl'), '01/azure.arm.base.assembly.json', parameters('linkedAssembliesArmTemplateRootSas'))]"
        },
        "sql": {
            "server": {
                "administrator": {
                    "login": "[parameters('sqlServerAdministratorLogin')]",
                    "loginPassword": "[parameters('sqlServerAdministratorLoginPassword')]",
                    "developerStatingSecretsAreNotRecordedInCode": "[parameters('sqlServerDeveloperStatingSecretsAreNotRecordedInCode')]"
                }
            }
        },
        "web": {
            "serverFarm": {
                "resourceSku": "[parameters('webServerFarmResourceSku')]"
            },
            "certificate": {
                "pfxBase64": "[parameters('webCertificatePfxBase64')]",
                "pfxPassword": "[parameters('webCertificatePfxPassword')]",
                "developerStatingSecretsAreNotRecordedInCode": "[parameters('webCertificateDeveloperStatingSecretsAreNotRecordedInCode')]"
            },
            "site": {
                "resourceName": "[parameters('webSiteResourceName')]",
                "alwaysOn": "[parameters('webSiteAlwaysOn')]",
                "config": {
                    "appSettings": {
                        "appSettings": "[parameters('webSiteConfigAppSettings')]",
                        "developerStatingSecretsAreNotRecordedInCode": "parameters('webSiteConfigAppSettingsDeveloperStatingSecretsAreNotRecordedInCode')]"
                    },
                    "connectionStrings": {
                        "connectionStrings": "[parameters('webSiteConfigConnectionStrings')]",
                        "developerStatingSecretsAreNotRecordedInCode": "parameters('webSiteConfigConnectionStringsDeveloperStatingSecretsAreNotRecordedInCode')]"
                    }
                }, 
                "hostNameBinding": {
                    "hostName": "[parameters('webSiteHostNameBindingHostName')]",
                    "hostNameAlt": "[parameters('webSiteHostNameBindingHostNameAlt')]"
                }
            } 
        }, 
        "oauth": {
            "enabled": "[parameters('oauthEnabled')]",
            "client": {
                "authorityUri": "[parameters('oauthAuthorityUri')]",
                "id": "[parameters('oauthClientId')]",
                "secret": "[parameters('oauthClientSecret')]",
                "redirectUri": "[parameters('oauthClientRedirectUri')]",
                "postLogoutRedirectUri": "[parameters('oauthClientPostLogoutRedirectUri')]"
            }
        },
        "oidc": {
            "client": {
            },
            "server": {
            },
            "policies": {
                "signUpSignInPolicyId": "[parameters('oidcPoliciesSignUpSignInPolicyId')]",
                "userProfilePolicyId": "[parameters('oidcPoliciesUserProfilePolicyId')]",
                "editProfilePolicyId": "[parameters('oidcPoliciesEditProfilePolicyId')]",
                "resetPasswordPolicyId": "[parameters('oidcPoliciesResetPasswordPolicyId')]"
            }
        }
    }, 
    "resources": [
        {
            "name": "[variables('assembly').armTemplateId]",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('assembly').linkedAssembly01TemplateUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "linkedResourcesArmTemplateRootUrl": {
                        "value": "[variables('assembly').linkedResourcesArmTemplateRootUrl]"
                    },
                    "linkedResourcesArmTemplateRootSas": {
                        "value": "[variables('assembly').linkedResourcesArmTemplateRootSas]"
                    },
                    "resourceAltLocation": {
                        "value": "[variables('locations').resourceAltLocation]"
                    },
                    "resourceNameTemplate": {
                        "value": "[variables('resources').resourceNameTemplate]"
                    },
                    "commonResourceTags": {
                        "value": "[variables('resources').commonResourceTags]"
                    },
                    "securityApproach": {
                        "value": "[variables('securityApproach')]"
                    },
                    "sqlServerAdministratorLogin": {
                        "value": "[variables('sql').server.administrator.login]"
                    },
                    "sqlServerAdministratorLoginPassword": {
                        "value": "[variables('sql').server.administrator.loginPassword]"
                    },
                    "sqlServerDeveloperStatingSecretsAreNotRecordedInCode": {
                        "value": "[variables('sql').server.administrator.developerStatingSecretsAreNotRecordedInCode]"
                    },
                    "webServerFarmResourceSku": {
                        "value": "[variables('web').serverFarm.resourceSku]"
                    },
                    "webCertificatePfxBase64": {
                        "value": "[variables('web').certificate.pfxBase64]"
                    },
                    "webCertificatePfxPassword": {
                        "value": "[variables('web').certificate.pfxPassword]"
                    },
                    "webCertificateDeveloperStatingSecretsAreNotRecordedInCode": {
                        "value": "[variables('web').certificate.developerStatingSecretsAreNotRecordedInCode]"
                    },
                    "webSiteResourceName": {
                        "value": "[variables('web').site.resourceName]"
                    },
                    "webSiteAlwaysOn": {
                        "value": "[variables('web').site.alwaysOn]"
                    },
                    "webSiteConfigAppSettings": {
                        "value": "[variables('web').site.config.appSettings.appSettings]"
                    },
                    "webSiteConfigAppSettingsDeveloperStatingSecretsAreNotRecordedInCode": {
                        "value": "[variables('web').site.config.appSettings.developerStatingSecretsAreNotRecordedInCode]"
                    },
                    "webSiteConfigConnectionStrings": {
                        "value": "[variables('web').site.config.connectionStrings.connectionStrings]"
                    },
                    "webSiteConfigConnectionStringsDeveloperStatingSecretsAreNotRecordedInCode": {
                        "value": "[variables('web').site.config.connectionStrings.developerStatingSecretsAreNotRecordedInCode]"
                    },
                    "webSiteHostNameBindingHostName": {
                        "value": "[variables('web').site.hostNameBinding.hostName]"
                    },
                    "webSiteHostNameBindingHostNameAlt": {
                        "value": "[variables('web').site.hostNameBinding.hostNameAlt]"
                    },
                    "oauthEnabled": {
                        "value": "[variables('oauth').enabled]"
                    },
                    "oauthAuthorityUri": {
                        "value": "[variables('oauth').client.authorityUri]"
                    },
                    "oauthClientId": {
                        "value": "[variables('oauth').client.id]"
                    },
                    "oauthClientSecret": {
                        "value": "[variables('oauth').client.secret]"
                    },
                    "oauthClientRedirectUri": {
                        "value": "[variables('oidc').client.redirectUri]"
                    },
                    "oauthClientPostLogoutRedirectUri": {
                        "value": "[variables('oidc').client.postLogoutRedirectUri]"
                    },
                    "oidcPoliciesSignUpSignInPolicyId": {
                        "value": "[variables('oidc').policies.signUpSignInPolicyId]"
                    },
                    "oidcPoliciesUserProfilePolicyId": {
                        "value": "[variables('oidc').policies.userProfilePolicyId]"
                    },
                    "oidcPoliciesEditProfilePolicyId": {
                        "value": "[variables('oidc').policies.editProfilePolicyId]"
                    },
                    "oidcPoliciesResetPasswordPolicyId": {
                        "value": "[variables('oidc').policies.resetPasswordPolicyId]"
                    }
                } 
            } 
        } 
    ],
    "outputs": {
        "webSiteResourceName": {
            "type": "string",
            "value": "[reference(variables('assembly').armTemplateId).outputs.webSiteResourceName.value]"
        },
        "webSitePrincipalId": {
            "type": "string",
            "value": "[reference(variables('assembly').armTemplateId).outputs.webSitePrincipalId.value]"
        },
        "webSiteDefaultConnectionString": {
            "type": "string",
            "value": "[reference(variables('assembly').armTemplateId).outputs.webSiteDefaultConnectionString.value]"
        },
        "webSiteKeyVaultResourceName": {
            "type": "string",
            "value": "[reference(variables('assembly').armTemplateId).outputs.webSiteKeyVaultResourceName.value]"
        },
        "sqlServerResourceName": {
            "type": "string",
            "value": "[reference(variables('assembly').armTemplateId).outputs.sqlServerResourceName.value]"
        },
        "sqlServerDatabaseResourceName": {
            "type": "string",
            "value": "[reference(variables('assembly').armTemplateId).outputs.sqlServerDatabaseResourceName.value]"
        }
    } 
}
